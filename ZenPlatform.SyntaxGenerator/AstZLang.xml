<?xml version="1.0" encoding="utf-8"?>
<Config>
    

    <Syntax IsList="true" Base="Function" Name="FunctionList"/>
    <Syntax IsList="true" Base="Field" Name="FieldList"/>
    <Syntax IsList="true" Base="Property" Name="PropertyList"/>
    <Syntax IsList="true" Base="Constructor" Name="ConstructorList"/>
    <Syntax IsList="true" Base="TypeSyntax" Name="TypeList"/>
    <Syntax IsList="true" Base="Statement" Name="StatementList"/>
    <Syntax IsList="true" Base="Parameter" Name="ParameterList"/>
    <Syntax IsList="true" Base="AttributeSyntax" Name="AttributeList"/>
    <Syntax IsList="true" Base="Argument" Name="ArgumentList"/>
    <Syntax IsList="true" Base="MatchAtom" Name="MatchAtomList"/>
    
    <Syntax IsList="true" Base="UsingBase" Name="UsingList"/>
    <Syntax IsList="true" Base="TypeEntity" Name="EntityList"/>
    <Syntax IsList="true" Base="NamespaceDeclaration" Name="NamespaceDeclarationList"/>
    <Syntax IsList="true" Base="CompilationUnit" Name="CompilationUnitList"/>

    <Syntax Name="Root" IsScoped="true">
        <Arguments>
            <List Name="Units" Type="CompilationUnitList"/>
        </Arguments>
    </Syntax>
    
    <Syntax Name="NamespaceDeclaration" IsScoped="true">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <List Name="Usings" Type="UsingList"/>
            <List Name="Entityes" Type="EntityList"/>
            <List Name="NamespaceDeclarations" Type="NamespaceDeclarationList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CompilationUnit">
        <Arguments>
            <List Name="Usings" Type="UsingList"/>
            <List Name="Entityes" Type="EntityList"/>
            <List Name="NamespaceDeclarations" Type="NamespaceDeclarationList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingBase" IsAbstract="true">
        <Arguments>
            <Single Name="Name" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingDeclaration" Base="UsingBase">
        <Arguments>
            <Single Name="Name" PassBase="true" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingAliasDeclaration" Base="UsingBase">
        <Arguments>
            <Single Name="ClassName" PassBase="true" DenyChildrenFill="true" Type="String"/>
            <Single Name="Alias" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeBody" IsScoped="true">
        <Arguments>
            <List Name="Functions" Type="FunctionList"/>
            <List Name="Fields" Type="FieldList"/>
            <List Name="Properties" Type="PropertyList"/>
            <List Name="Constructors" Type="ConstructorList"/>
            <List Name="Usings" Type="UsingList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeEntity" IsAbstract="true">
        <Arguments>
            <Single Name="TypeBody" Type="TypeBody"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Base" Type="TypeSyntax" Default="null"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Class" Base="TypeEntity" IsSymbol="true">
        <Arguments>
            <Single Name="TypeBody" Type="TypeBody" DenyChildrenFill="true" PassBase="true" OnlyArgument="true"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true" PassBase="true" OnlyArgument="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Module" Base="TypeEntity" IsSymbol="true">
        <Arguments>
            <Single Name="TypeBody" Type="TypeBody" DenyChildrenFill="true" PassBase="true" OnlyArgument="true"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true" PassBase="true" OnlyArgument="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Expression" IsAbstract="true"/>

    <Syntax Name="Statement" IsAbstract="true" NS="Statements"/>

    <Syntax Name="BinaryExpression" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Right" Type="Expression"/>
            <Single Name="Left" Type="Expression"/>
            <Single Name="BinaryOperatorType" Type="BinaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="UnaryExpression" Base="Expression" IsAbstract="true" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CastExpression" Base="UnaryExpression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="CastType" Type="TypeSyntax"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IndexerExpression" Base="UnaryExpression" NS="Expressions">
        <Arguments>
            <Single Name="Indexer" Type="Expression"/>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LogicalOrArithmeticExpression" Base="UnaryExpression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Assignment" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Value" Type="Expression"/>
            <Single Name="Index" Type="Expression"/>
            <Single Name="Assignable" Type="ICanBeAssigned"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeSyntax" IsAbstract="true"/>
    <Syntax Name="PrimitiveTypeSyntax" Base="TypeSyntax"/>
    <Syntax Name="SingleTypeSyntax" Base="TypeSyntax"/>
    <Syntax Name="ArrayTypeSyntax" Base="TypeSyntax"/>
    <Syntax Name="UnionTypeSyntax" Base="TypeSyntax"/>
    <Syntax Name="GenericTypeSyntax" Base="TypeSyntax">
        <Arguments>
            <List Name="Args" Type="TypeList"/>
        </Arguments>
    </Syntax>


    <Syntax Name="Block" IsScoped="true">
        <Arguments>
            <List Name="Statements" Type="StatementList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Parameter" NS="Functions" IsSymbol="true">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>

        </Arguments>
    </Syntax>

    <Syntax Name="AttributeSyntax"/>

    <Syntax Name="Member" IsAbstract="true"/>

    <Syntax Name="Function" Base="Member" IsScoped="true" IsSymbol="true" NS="Functions">
        <Arguments>
            <Single Name="Block" Type="Block"/>
            <List Name="Parameters" Type="ParameterList"/>
            <List Name="Attributes" Type="AttributeList"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeSyntax" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Constructor" Base="Member" IsScoped="true" IsSymbol="true">
        <Arguments>
            <Single Name="Block" Type="Block"/>
            <List Name="Parameters" Type="ParameterList"/>
            <List Name="Attributes" Type="AttributeList"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Field" Base="Member" IsSymbol="true">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Property" Base="Member" IsSymbol="true">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeSyntax"/>
            <Single Name="MapTo" Type="String" Default="null" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Argument" NS="Functions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Call" Base="Expression">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Name" Type="Name" DenyChildrenFill="true"/>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>
    <!--Test comment-->
    <Syntax Name="Return" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>


    <Syntax Name="Variable" Base="Expression" IsSymbol="true">
        <Arguments>
            <Single Name="Value" Type="Expression"/>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>


    <Syntax Name="ContextVariable" Base="Expression" IsSymbol="true">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Literal" Base="Expression"/>


    <Syntax Name="Name" Base="Expression">
        <Arguments>
            <Single Name="Value" Type="String" DenyChildrenFill="true"/>
        </Arguments>

    </Syntax>

    <Syntax Name="GetFieldExpression" Base="Expression">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LookupExpression" Base="Expression" IsAbstract="true">
        <Arguments>
            <Single Name="Lookup" Type="Expression"/>
            <Single Name="Current" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PropertyLookupExpression" Base="LookupExpression">
        <Arguments>
            <Single Name="Lookup" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MethodLookupExpression" Base="LookupExpression">
        <Arguments>
            <Single Name="Lookup" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>


    <Syntax Name="AssignFieldExpression" Base="Expression">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="DoWhile" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Block" Type="Block"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Try" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="TryBlock" Type="Block"/>
            <Single Name="CatchBlock" Type="Block"/>
            <Single Name="FinallyBlock" Type="Block"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ExpressionStatement" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="For" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="Block"/>
            <Single Name="Counter" Type="Expression"/>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Initializer" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="If" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="ElseBlock" Type="Block"/>
            <Single Name="IfBlock" Type="Block"/>
            <Single Name="Condition" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostOperationExpression" Base="Expression" NS="Expressions" IsAbstract="true">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostIncrementExpression" Base="PostOperationExpression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" DenyChildrenFill="true" OnlyArgument="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostDecrementExpression" Base="PostOperationExpression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" DenyChildrenFill="true" OnlyArgument="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Throw" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Exception" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MatchAtom" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="Block"/>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Match" Base="Statement" NS="Statements">
        <Arguments>
            <List Name="Matches" Type="MatchAtomList"/>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>


    <Syntax Name="GlobalVar" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

</Config>
    