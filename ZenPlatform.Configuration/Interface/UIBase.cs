using System;
using System.Collections.Generic;
using System.Reflection.Metadata.Ecma335;
using System.Text;

namespace ZenPlatform.Configuration.Interface
{

    /*
     TODO: Реализовать структуру хранения конфигурации интерфейса.
     
        Есть базовый класс, который отвечает за хранение информации о форме, назовём его скажем PUIForm
        В неём хранится вся структура контейнеров, которые в нём находятся.

        Также форма должна поддерживать логику, которая ходит соответственно вместе с формой.
        Из клиентского кода есть возможность вызвать серверный код и получить обратно объект ClientEntity, которая тоже должна поддерживать хитрый LazyLoading
        
        Чтобы вызвать серверный код, необходимо просто 

        
        1) Форма должна поддерживать комманды. Есть специальный контейнер команд
        2) Форма должна поддерживать привязку кода (Модуль формы). Т.е. Есть класс с логикой, который можно подвязать к форме
        для примера, у нас есть форма редактирования для документа 
        Помимо того, что у нас есть объект, Entity, который передаётся в форму в качестве какого-то параметра, у нас ещё есть имплементация команд и т.д.

        Для формы необходимо, чтобы генерировался такой код на клиенте:

        Для этого необходимо 
            1) Передавать скомпилированную сборку с имплементацией UILogic? В какой момент? Если мы подгружаем её, то её невозможно будет выгрузить. Есть решения лучше?
            2) Почему бы не передавать сразу же код формы и собирать её на клиенте? А если клиент это WebBrowser? В таком случае логично что будет и веб сервер, который 
            собственно будет и собирать это, также необходима транслитерация языка (C# -> JS, WebAssembly нам поможет?)


        public class From1
        {
            UILogic _logic;
            Entity _object;

            public Form1(Entity object, UILogic logic)
            {
                _logic = logic;
                _object = object;

                // Bindings 
            }

            public OnClose()
            {
                _logic.OnClose();
            }
        }


         */


    public class UIForm
    {

    }

    public enum UIType
    {
        Edit,
        Pick,
        List
    }
}
