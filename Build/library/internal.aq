import Entity;

static void take_book(User user, Book book)
{
    //1. We can't give a book that we not have
    if(is_book_awailable(book))
    {
        var history = HistoryManager.create();
        history.Book = book;
        history.User = user;
        history.Date = get_date();
        history.Operation = -1;

        history.save();
    }
    
    //TODO: throw the exception
}

static bool is_book_awailable(Book book)
{
    var q = query();
    q.text = @"FROM History 
               WHERE Book = @book 
               GROUP BY Book
               HAVING SUM(Operation) > 0
               SELECT 1";

    q.set_param("book", book);
    var reader = q.exec();

    if(reader.read())
        return true;

    return false;
}

static void return_book(User user, Book book)
{
    if(is_book_awailable(book))
    {
        //we can't return book twice throw the error
        return;
    }

    var history = HistoryManager.create();
    history.Book = book;
    history.User = user;
    history.Date = get_date();
    history.Operation = 1;

    history.save();
}