namespace Aquila.Compiler.Infrastructure
{
    /*
     *    МАППИНГ типов
     *
     *     В платформе, каждый разработчик может создать свой компаннет для обслуживания структур, которые он захочет.
     *
     *     Например у нас есть компонент "Документ"
     *
     *
     *     После подключения компоннета у нас в дереве конфигурации доступны новые ветки.
     *
     *     В дереве компонента "Документ" мы создаём новый объект "ПриходнаяНакладная"
     *
     *     и в документе добавляем реквизит. "Номенклатура"
     *
     *     -- Корень
     *         -- Данные
     *             -- Справочники
     *                 -- Номенклатура
     *                 -- ДополнительнаяНоменклатура
     *             -- Документы
     *                 -- Приходная накладная
     *                     -- Номенклатура <Номенклатура, ДополнительнаяНоменклатура> 
     *
     *
     *     Типы компонента "Справочник" могут иметь какие-угодно имена. Например: Ref0001_Model
     *
     *
     *     В это же время мы ОБЯЗАНЫ обеспечить следующее поведение
     *
     *
     *  use Reference, Documents; <--- Пространства дступных имен в данном контексте
     *
     * 
     *     public void SomeProc()
     *     {
     *         var doc = ПриходнаяНакладная.FindByNumber("0000001");
     *          ^                  ^
     *          |                  |
     *          |          Вот это имя должно быть доступно для компилятора
     *          | 
     * SINGLE_TYPE = <ПриходнаяНакладная> 
     *
     *         var n = doc.Номенклатура;
     *          ^
     *          |
     *    UNION_TYPE = <Номенклатура, ДополнительнаяНоменклатура>
     *
     *         match n.Type
     *             | Номенклатура => { some  block of instructions ... }
     *             | ДополнительнаяНоменклатура => { some block of instructions ... }
     *
     *         Если же у этих типов есть общий интерфейс, то мы можем сделать вот так:
     *
     *         User.ShowMessage(n.Номер);
     *
     *
     *         Можно в будущем создать библиотеки, которые позволяют обобщать типы из разных компонентов
     *     }
     */
}