// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Microsoft.CodeAnalysis.Syntax.InternalSyntax;
using Roslyn.Utilities;

namespace Aquila.CodeAnalysis
{
    using System.Diagnostics.CodeAnalysis;
    using Aquila.CodeAnalysis.Syntax;
    using Microsoft.CodeAnalysis;

    public partial class AquilaSyntaxVisitor<TResult>
    {
        /// <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        public virtual TResult? VisitCompilationUnit(CompilationUnitSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ImportDecl node.</summary>
        public virtual TResult? VisitImportDecl(ImportDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MethodDecl node.</summary>
        public virtual TResult? VisitMethodDecl(MethodDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExtendDecl node.</summary>
        public virtual TResult? VisitExtendDecl(ExtendDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ComponentDecl node.</summary>
        public virtual TResult? VisitComponentDecl(ComponentDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeListSyntax node.</summary>
        public virtual TResult? VisitAttributeList(AttributeListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeSyntax node.</summary>
        public virtual TResult? VisitAttribute(AttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeArgumentListSyntax node.</summary>
        public virtual TResult? VisitAttributeArgumentList(AttributeArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeArgumentSyntax node.</summary>
        public virtual TResult? VisitAttributeArgument(AttributeArgumentSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameEqualsSyntax node.</summary>
        public virtual TResult? VisitNameEquals(NameEqualsSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeParameterListSyntax node.</summary>
        public virtual TResult? VisitTypeParameterList(TypeParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeParameterSyntax node.</summary>
        public virtual TResult? VisitTypeParameter(TypeParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BinaryEx node.</summary>
        public virtual TResult? VisitBinaryEx(BinaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParenthesizedEx node.</summary>
        public virtual TResult? VisitParenthesizedEx(ParenthesizedEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PrefixUnaryEx node.</summary>
        public virtual TResult? VisitPrefixUnaryEx(PrefixUnaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PostfixUnaryEx node.</summary>
        public virtual TResult? VisitPostfixUnaryEx(PostfixUnaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InvocationEx node.</summary>
        public virtual TResult? VisitInvocationEx(InvocationEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AssignEx node.</summary>
        public virtual TResult? VisitAssignEx(AssignEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ElementAccessEx node.</summary>
        public virtual TResult? VisitElementAccessEx(ElementAccessEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MemberAccessEx node.</summary>
        public virtual TResult? VisitMemberAccessEx(MemberAccessEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolatedStringEx node.</summary>
        public virtual TResult? VisitInterpolatedStringEx(InterpolatedStringEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a RangeEx node.</summary>
        public virtual TResult? VisitRangeEx(RangeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ConditionalEx node.</summary>
        public virtual TResult? VisitConditionalEx(ConditionalEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ThrowEx node.</summary>
        public virtual TResult? VisitThrowEx(ThrowEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LiteralEx node.</summary>
        public virtual TResult? VisitLiteralEx(LiteralEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrowExClause node.</summary>
        public virtual TResult? VisitArrowExClause(ArrowExClause node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InitializerEx node.</summary>
        public virtual TResult? VisitInitializerEx(InitializerEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MatchEx node.</summary>
        public virtual TResult? VisitMatchEx(MatchEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MatchArm node.</summary>
        public virtual TResult? VisitMatchArm(MatchArm node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolatedStringTextSyntax node.</summary>
        public virtual TResult? VisitInterpolatedStringText(InterpolatedStringTextSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationSyntax node.</summary>
        public virtual TResult? VisitInterpolation(InterpolationSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationAlignmentClauseSyntax node.</summary>
        public virtual TResult? VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationFormatClauseSyntax node.</summary>
        public virtual TResult? VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArgumentListSyntax node.</summary>
        public virtual TResult? VisitArgumentList(ArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BracketedArgumentListSyntax node.</summary>
        public virtual TResult? VisitBracketedArgumentList(BracketedArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArgumentSyntax node.</summary>
        public virtual TResult? VisitArgument(ArgumentSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExprColonSyntax node.</summary>
        public virtual TResult? VisitExprColon(ExprColonSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameColonSyntax node.</summary>
        public virtual TResult? VisitNameColon(NameColonSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a QualifiedNameEx node.</summary>
        public virtual TResult? VisitQualifiedNameEx(QualifiedNameEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IdentifierEx node.</summary>
        public virtual TResult? VisitIdentifierEx(IdentifierEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a GenericEx node.</summary>
        public virtual TResult? VisitGenericEx(GenericEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PredefinedTypeEx node.</summary>
        public virtual TResult? VisitPredefinedTypeEx(PredefinedTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrayTypeEx node.</summary>
        public virtual TResult? VisitArrayTypeEx(ArrayTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a UnionTypeEx node.</summary>
        public virtual TResult? VisitUnionTypeEx(UnionTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a RefTypeEx node.</summary>
        public virtual TResult? VisitRefTypeEx(RefTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeArgumentListSyntax node.</summary>
        public virtual TResult? VisitTypeArgumentList(TypeArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrayRankSpecifierSyntax node.</summary>
        public virtual TResult? VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a OmittedArraySizeEx node.</summary>
        public virtual TResult? VisitOmittedArraySizeEx(OmittedArraySizeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        public virtual TResult? VisitParameterList(ParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BracketedParameterListSyntax node.</summary>
        public virtual TResult? VisitBracketedParameterList(BracketedParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParameterSyntax node.</summary>
        public virtual TResult? VisitParameter(ParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a FunctionPointerParameterSyntax node.</summary>
        public virtual TResult? VisitFunctionPointerParameter(FunctionPointerParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IncompleteMemberSyntax node.</summary>
        public virtual TResult? VisitIncompleteMember(IncompleteMemberSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        public virtual TResult? VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a EqualsValueClauseSyntax node.</summary>
        public virtual TResult? VisitEqualsValueClause(EqualsValueClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a VariableDecl node.</summary>
        public virtual TResult? VisitVariableDecl(VariableDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a VariableInit node.</summary>
        public virtual TResult? VisitVariableInit(VariableInit node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BlockStmt node.</summary>
        public virtual TResult? VisitBlockStmt(BlockStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExpressionStmt node.</summary>
        public virtual TResult? VisitExpressionStmt(ExpressionStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a EmptyStmt node.</summary>
        public virtual TResult? VisitEmptyStmt(EmptyStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LabeledStmt node.</summary>
        public virtual TResult? VisitLabeledStmt(LabeledStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a GotoStmt node.</summary>
        public virtual TResult? VisitGotoStmt(GotoStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BreakStmt node.</summary>
        public virtual TResult? VisitBreakStmt(BreakStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ContinueStmt node.</summary>
        public virtual TResult? VisitContinueStmt(ContinueStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ReturnStmt node.</summary>
        public virtual TResult? VisitReturnStmt(ReturnStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ThrowStmt node.</summary>
        public virtual TResult? VisitThrowStmt(ThrowStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a YieldStmt node.</summary>
        public virtual TResult? VisitYieldStmt(YieldStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a WhileStmt node.</summary>
        public virtual TResult? VisitWhileStmt(WhileStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a DoStmt node.</summary>
        public virtual TResult? VisitDoStmt(DoStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ForStmt node.</summary>
        public virtual TResult? VisitForStmt(ForStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LocalDeclStmt node.</summary>
        public virtual TResult? VisitLocalDeclStmt(LocalDeclStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IfStmt node.</summary>
        public virtual TResult? VisitIfStmt(IfStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        public virtual TResult? VisitElseClause(ElseClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a DocumentationCommentTriviaSyntax node.</summary>
        public virtual TResult? VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeCrefSyntax node.</summary>
        public virtual TResult? VisitTypeCref(TypeCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a QualifiedCrefSyntax node.</summary>
        public virtual TResult? VisitQualifiedCref(QualifiedCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameMemberCrefSyntax node.</summary>
        public virtual TResult? VisitNameMemberCref(NameMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IndexerMemberCrefSyntax node.</summary>
        public virtual TResult? VisitIndexerMemberCref(IndexerMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a OperatorMemberCrefSyntax node.</summary>
        public virtual TResult? VisitOperatorMemberCref(OperatorMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ConversionOperatorMemberCrefSyntax node.</summary>
        public virtual TResult? VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefParameterListSyntax node.</summary>
        public virtual TResult? VisitCrefParameterList(CrefParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefBracketedParameterListSyntax node.</summary>
        public virtual TResult? VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefParameterSyntax node.</summary>
        public virtual TResult? VisitCrefParameter(CrefParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementSyntax node.</summary>
        public virtual TResult? VisitXmlElement(XmlElementSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementStartTagSyntax node.</summary>
        public virtual TResult? VisitXmlElementStartTag(XmlElementStartTagSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementEndTagSyntax node.</summary>
        public virtual TResult? VisitXmlElementEndTag(XmlElementEndTagSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlEmptyElementSyntax node.</summary>
        public virtual TResult? VisitXmlEmptyElement(XmlEmptyElementSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlNameSyntax node.</summary>
        public virtual TResult? VisitXmlName(XmlNameSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlPrefixSyntax node.</summary>
        public virtual TResult? VisitXmlPrefix(XmlPrefixSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlTextAttributeSyntax node.</summary>
        public virtual TResult? VisitXmlTextAttribute(XmlTextAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCrefAttributeSyntax node.</summary>
        public virtual TResult? VisitXmlCrefAttribute(XmlCrefAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlNameAttributeSyntax node.</summary>
        public virtual TResult? VisitXmlNameAttribute(XmlNameAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlTextSyntax node.</summary>
        public virtual TResult? VisitXmlText(XmlTextSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCDataSectionSyntax node.</summary>
        public virtual TResult? VisitXmlCDataSection(XmlCDataSectionSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlProcessingInstructionSyntax node.</summary>
        public virtual TResult? VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCommentSyntax node.</summary>
        public virtual TResult? VisitXmlComment(XmlCommentSyntax node) => this.DefaultVisit(node);
    }

    public partial class AquilaSyntaxVisitor
    {
        /// <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        public virtual void VisitCompilationUnit(CompilationUnitSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ImportDecl node.</summary>
        public virtual void VisitImportDecl(ImportDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MethodDecl node.</summary>
        public virtual void VisitMethodDecl(MethodDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExtendDecl node.</summary>
        public virtual void VisitExtendDecl(ExtendDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ComponentDecl node.</summary>
        public virtual void VisitComponentDecl(ComponentDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeListSyntax node.</summary>
        public virtual void VisitAttributeList(AttributeListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeSyntax node.</summary>
        public virtual void VisitAttribute(AttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeArgumentListSyntax node.</summary>
        public virtual void VisitAttributeArgumentList(AttributeArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AttributeArgumentSyntax node.</summary>
        public virtual void VisitAttributeArgument(AttributeArgumentSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameEqualsSyntax node.</summary>
        public virtual void VisitNameEquals(NameEqualsSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeParameterListSyntax node.</summary>
        public virtual void VisitTypeParameterList(TypeParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeParameterSyntax node.</summary>
        public virtual void VisitTypeParameter(TypeParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BinaryEx node.</summary>
        public virtual void VisitBinaryEx(BinaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParenthesizedEx node.</summary>
        public virtual void VisitParenthesizedEx(ParenthesizedEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PrefixUnaryEx node.</summary>
        public virtual void VisitPrefixUnaryEx(PrefixUnaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PostfixUnaryEx node.</summary>
        public virtual void VisitPostfixUnaryEx(PostfixUnaryEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InvocationEx node.</summary>
        public virtual void VisitInvocationEx(InvocationEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a AssignEx node.</summary>
        public virtual void VisitAssignEx(AssignEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ElementAccessEx node.</summary>
        public virtual void VisitElementAccessEx(ElementAccessEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MemberAccessEx node.</summary>
        public virtual void VisitMemberAccessEx(MemberAccessEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolatedStringEx node.</summary>
        public virtual void VisitInterpolatedStringEx(InterpolatedStringEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a RangeEx node.</summary>
        public virtual void VisitRangeEx(RangeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ConditionalEx node.</summary>
        public virtual void VisitConditionalEx(ConditionalEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ThrowEx node.</summary>
        public virtual void VisitThrowEx(ThrowEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LiteralEx node.</summary>
        public virtual void VisitLiteralEx(LiteralEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrowExClause node.</summary>
        public virtual void VisitArrowExClause(ArrowExClause node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InitializerEx node.</summary>
        public virtual void VisitInitializerEx(InitializerEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MatchEx node.</summary>
        public virtual void VisitMatchEx(MatchEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a MatchArm node.</summary>
        public virtual void VisitMatchArm(MatchArm node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolatedStringTextSyntax node.</summary>
        public virtual void VisitInterpolatedStringText(InterpolatedStringTextSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationSyntax node.</summary>
        public virtual void VisitInterpolation(InterpolationSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationAlignmentClauseSyntax node.</summary>
        public virtual void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a InterpolationFormatClauseSyntax node.</summary>
        public virtual void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArgumentListSyntax node.</summary>
        public virtual void VisitArgumentList(ArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BracketedArgumentListSyntax node.</summary>
        public virtual void VisitBracketedArgumentList(BracketedArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArgumentSyntax node.</summary>
        public virtual void VisitArgument(ArgumentSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExprColonSyntax node.</summary>
        public virtual void VisitExprColon(ExprColonSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameColonSyntax node.</summary>
        public virtual void VisitNameColon(NameColonSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a QualifiedNameEx node.</summary>
        public virtual void VisitQualifiedNameEx(QualifiedNameEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IdentifierEx node.</summary>
        public virtual void VisitIdentifierEx(IdentifierEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a GenericEx node.</summary>
        public virtual void VisitGenericEx(GenericEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a PredefinedTypeEx node.</summary>
        public virtual void VisitPredefinedTypeEx(PredefinedTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrayTypeEx node.</summary>
        public virtual void VisitArrayTypeEx(ArrayTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a UnionTypeEx node.</summary>
        public virtual void VisitUnionTypeEx(UnionTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a RefTypeEx node.</summary>
        public virtual void VisitRefTypeEx(RefTypeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeArgumentListSyntax node.</summary>
        public virtual void VisitTypeArgumentList(TypeArgumentListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ArrayRankSpecifierSyntax node.</summary>
        public virtual void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a OmittedArraySizeEx node.</summary>
        public virtual void VisitOmittedArraySizeEx(OmittedArraySizeEx node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        public virtual void VisitParameterList(ParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BracketedParameterListSyntax node.</summary>
        public virtual void VisitBracketedParameterList(BracketedParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ParameterSyntax node.</summary>
        public virtual void VisitParameter(ParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a FunctionPointerParameterSyntax node.</summary>
        public virtual void VisitFunctionPointerParameter(FunctionPointerParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IncompleteMemberSyntax node.</summary>
        public virtual void VisitIncompleteMember(IncompleteMemberSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        public virtual void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a EqualsValueClauseSyntax node.</summary>
        public virtual void VisitEqualsValueClause(EqualsValueClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a VariableDecl node.</summary>
        public virtual void VisitVariableDecl(VariableDecl node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a VariableInit node.</summary>
        public virtual void VisitVariableInit(VariableInit node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BlockStmt node.</summary>
        public virtual void VisitBlockStmt(BlockStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ExpressionStmt node.</summary>
        public virtual void VisitExpressionStmt(ExpressionStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a EmptyStmt node.</summary>
        public virtual void VisitEmptyStmt(EmptyStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LabeledStmt node.</summary>
        public virtual void VisitLabeledStmt(LabeledStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a GotoStmt node.</summary>
        public virtual void VisitGotoStmt(GotoStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a BreakStmt node.</summary>
        public virtual void VisitBreakStmt(BreakStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ContinueStmt node.</summary>
        public virtual void VisitContinueStmt(ContinueStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ReturnStmt node.</summary>
        public virtual void VisitReturnStmt(ReturnStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ThrowStmt node.</summary>
        public virtual void VisitThrowStmt(ThrowStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a YieldStmt node.</summary>
        public virtual void VisitYieldStmt(YieldStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a WhileStmt node.</summary>
        public virtual void VisitWhileStmt(WhileStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a DoStmt node.</summary>
        public virtual void VisitDoStmt(DoStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ForStmt node.</summary>
        public virtual void VisitForStmt(ForStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a LocalDeclStmt node.</summary>
        public virtual void VisitLocalDeclStmt(LocalDeclStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IfStmt node.</summary>
        public virtual void VisitIfStmt(IfStmt node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        public virtual void VisitElseClause(ElseClauseSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a DocumentationCommentTriviaSyntax node.</summary>
        public virtual void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a TypeCrefSyntax node.</summary>
        public virtual void VisitTypeCref(TypeCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a QualifiedCrefSyntax node.</summary>
        public virtual void VisitQualifiedCref(QualifiedCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a NameMemberCrefSyntax node.</summary>
        public virtual void VisitNameMemberCref(NameMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a IndexerMemberCrefSyntax node.</summary>
        public virtual void VisitIndexerMemberCref(IndexerMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a OperatorMemberCrefSyntax node.</summary>
        public virtual void VisitOperatorMemberCref(OperatorMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a ConversionOperatorMemberCrefSyntax node.</summary>
        public virtual void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefParameterListSyntax node.</summary>
        public virtual void VisitCrefParameterList(CrefParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefBracketedParameterListSyntax node.</summary>
        public virtual void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a CrefParameterSyntax node.</summary>
        public virtual void VisitCrefParameter(CrefParameterSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementSyntax node.</summary>
        public virtual void VisitXmlElement(XmlElementSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementStartTagSyntax node.</summary>
        public virtual void VisitXmlElementStartTag(XmlElementStartTagSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlElementEndTagSyntax node.</summary>
        public virtual void VisitXmlElementEndTag(XmlElementEndTagSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlEmptyElementSyntax node.</summary>
        public virtual void VisitXmlEmptyElement(XmlEmptyElementSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlNameSyntax node.</summary>
        public virtual void VisitXmlName(XmlNameSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlPrefixSyntax node.</summary>
        public virtual void VisitXmlPrefix(XmlPrefixSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlTextAttributeSyntax node.</summary>
        public virtual void VisitXmlTextAttribute(XmlTextAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCrefAttributeSyntax node.</summary>
        public virtual void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlNameAttributeSyntax node.</summary>
        public virtual void VisitXmlNameAttribute(XmlNameAttributeSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlTextSyntax node.</summary>
        public virtual void VisitXmlText(XmlTextSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCDataSectionSyntax node.</summary>
        public virtual void VisitXmlCDataSection(XmlCDataSectionSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlProcessingInstructionSyntax node.</summary>
        public virtual void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node) => this.DefaultVisit(node);

        /// <summary>Called when the visitor visits a XmlCommentSyntax node.</summary>
        public virtual void VisitXmlComment(XmlCommentSyntax node) => this.DefaultVisit(node);
    }

    public partial class AquilaSyntaxRewriter : AquilaSyntaxVisitor<SyntaxNode?>
    {
        public override SyntaxNode? VisitCompilationUnit(CompilationUnitSyntax node)
            => node.Update(VisitList(node.Imports), VisitList(node.Methods), VisitList(node.Extends), VisitList(node.Components), VisitToken(node.EndOfFileToken));

        public override SyntaxNode? VisitImportDecl(ImportDecl node)
            => node.Update(VisitToken(node.ImportKeyword), (NameEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitMethodDecl(MethodDecl node)
            => node.Update(VisitList(node.AttributeLists), VisitList(node.Modifiers), (TypeEx?)Visit(node.ReturnType) ?? throw new ArgumentNullException("returnType"), VisitToken(node.Identifier), (TypeParameterListSyntax?)Visit(node.TypeParameterList), (ParameterListSyntax?)Visit(node.ParameterList) ?? throw new ArgumentNullException("parameterList"), (BlockStmt?)Visit(node.Body), (ArrowExClause?)Visit(node.ExpressionBody), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitExtendDecl(ExtendDecl node)
            => node.Update(VisitToken(node.ExtendKeyword), (NameEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.OpenBraceToken), VisitList(node.Methods), VisitToken(node.CloseBraceToken));

        public override SyntaxNode? VisitComponentDecl(ComponentDecl node)
            => node.Update(VisitToken(node.ComponentKeyword), (NameEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitList(node.Extends));

        public override SyntaxNode? VisitAttributeList(AttributeListSyntax node)
            => node.Update(VisitToken(node.OpenBracketToken), VisitList(node.Attributes), VisitToken(node.CloseBracketToken));

        public override SyntaxNode? VisitAttribute(AttributeSyntax node)
            => node.Update((NameEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), (AttributeArgumentListSyntax?)Visit(node.ArgumentList));

        public override SyntaxNode? VisitAttributeArgumentList(AttributeArgumentListSyntax node)
            => node.Update(VisitToken(node.OpenParenToken), VisitList(node.Arguments), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitAttributeArgument(AttributeArgumentSyntax node)
            => node.Update((NameEqualsSyntax?)Visit(node.NameEquals), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"));

        public override SyntaxNode? VisitNameEquals(NameEqualsSyntax node)
            => node.Update((IdentifierEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.EqualsToken));

        public override SyntaxNode? VisitTypeParameterList(TypeParameterListSyntax node)
            => node.Update(VisitToken(node.LessThanToken), VisitList(node.Parameters), VisitToken(node.GreaterThanToken));

        public override SyntaxNode? VisitTypeParameter(TypeParameterSyntax node)
            => node.Update(VisitList(node.AttributeLists), VisitToken(node.VarianceKeyword), VisitToken(node.Identifier));

        public override SyntaxNode? VisitBinaryEx(BinaryEx node)
            => node.Update((ExprSyntax?)Visit(node.Left) ?? throw new ArgumentNullException("left"), VisitToken(node.OperatorToken), (ExprSyntax?)Visit(node.Right) ?? throw new ArgumentNullException("right"));

        public override SyntaxNode? VisitParenthesizedEx(ParenthesizedEx node)
            => node.Update(VisitToken(node.OpenParenToken), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitPrefixUnaryEx(PrefixUnaryEx node)
            => node.Update(VisitToken(node.OperatorToken), (ExprSyntax?)Visit(node.Operand) ?? throw new ArgumentNullException("operand"));

        public override SyntaxNode? VisitPostfixUnaryEx(PostfixUnaryEx node)
            => node.Update((ExprSyntax?)Visit(node.Operand) ?? throw new ArgumentNullException("operand"), VisitToken(node.OperatorToken));

        public override SyntaxNode? VisitInvocationEx(InvocationEx node)
            => node.Update((ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), (ArgumentListSyntax?)Visit(node.ArgumentList) ?? throw new ArgumentNullException("argumentList"));

        public override SyntaxNode? VisitAssignEx(AssignEx node)
            => node.Update((ExprSyntax?)Visit(node.Left) ?? throw new ArgumentNullException("left"), VisitToken(node.OperatorToken), (ExprSyntax?)Visit(node.Right) ?? throw new ArgumentNullException("right"));

        public override SyntaxNode? VisitElementAccessEx(ElementAccessEx node)
            => node.Update((ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), (BracketedArgumentListSyntax?)Visit(node.ArgumentList) ?? throw new ArgumentNullException("argumentList"));

        public override SyntaxNode? VisitMemberAccessEx(MemberAccessEx node)
            => node.Update((ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), VisitToken(node.OperatorToken), (NameEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"));

        public override SyntaxNode? VisitInterpolatedStringEx(InterpolatedStringEx node)
            => node.Update(VisitToken(node.StringStartToken), VisitList(node.Contents), VisitToken(node.StringEndToken));

        public override SyntaxNode? VisitRangeEx(RangeEx node)
            => node.Update((ExprSyntax?)Visit(node.LeftOperand), VisitToken(node.OperatorToken), (ExprSyntax?)Visit(node.RightOperand));

        public override SyntaxNode? VisitConditionalEx(ConditionalEx node)
            => node.Update((ExprSyntax?)Visit(node.Condition) ?? throw new ArgumentNullException("condition"), VisitToken(node.QuestionToken), (ExprSyntax?)Visit(node.WhenTrue) ?? throw new ArgumentNullException("whenTrue"), VisitToken(node.ColonToken), (ExprSyntax?)Visit(node.WhenFalse) ?? throw new ArgumentNullException("whenFalse"));

        public override SyntaxNode? VisitThrowEx(ThrowEx node)
            => node.Update(VisitToken(node.ThrowKeyword), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"));

        public override SyntaxNode? VisitLiteralEx(LiteralEx node)
            => node.Update(VisitToken(node.Token));

        public override SyntaxNode? VisitArrowExClause(ArrowExClause node)
            => node.Update(VisitToken(node.ArrowToken), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"));

        public override SyntaxNode? VisitInitializerEx(InitializerEx node)
            => node.Update(VisitToken(node.OpenBraceToken), VisitList(node.Expressions), VisitToken(node.CloseBraceToken));

        public override SyntaxNode? VisitMatchEx(MatchEx node)
            => node.Update(VisitToken(node.MatchKeyword), VisitToken(node.OpenParenToken), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), VisitToken(node.CloseParenToken), VisitToken(node.OpenBraceToken), VisitList(node.Arms), VisitToken(node.CloseBraceToken));

        public override SyntaxNode? VisitMatchArm(MatchArm node)
            => node.Update(VisitToken(node.BarToken), (ExprSyntax?)Visit(node.PatternExpression) ?? throw new ArgumentNullException("patternExpression"), VisitToken(node.EqualsGreaterThanToken), (ExprSyntax?)Visit(node.ResultExpression) ?? throw new ArgumentNullException("resultExpression"));

        public override SyntaxNode? VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
            => node.Update(VisitToken(node.TextToken));

        public override SyntaxNode? VisitInterpolation(InterpolationSyntax node)
            => node.Update(VisitToken(node.OpenBraceToken), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), (InterpolationAlignmentClauseSyntax?)Visit(node.AlignmentClause), (InterpolationFormatClauseSyntax?)Visit(node.FormatClause), VisitToken(node.CloseBraceToken));

        public override SyntaxNode? VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
            => node.Update(VisitToken(node.CommaToken), (ExprSyntax?)Visit(node.Value) ?? throw new ArgumentNullException("value"));

        public override SyntaxNode? VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
            => node.Update(VisitToken(node.ColonToken), VisitToken(node.FormatStringToken));

        public override SyntaxNode? VisitArgumentList(ArgumentListSyntax node)
            => node.Update(VisitToken(node.OpenParenToken), VisitList(node.Arguments), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitBracketedArgumentList(BracketedArgumentListSyntax node)
            => node.Update(VisitToken(node.OpenBracketToken), VisitList(node.Arguments), VisitToken(node.CloseBracketToken));

        public override SyntaxNode? VisitArgument(ArgumentSyntax node)
            => node.Update((NameColonSyntax?)Visit(node.NameColon), VisitToken(node.RefKindKeyword), (ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"));

        public override SyntaxNode? VisitExprColon(ExprColonSyntax node)
            => node.Update((ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), VisitToken(node.ColonToken));

        public override SyntaxNode? VisitNameColon(NameColonSyntax node)
            => node.Update((IdentifierEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.ColonToken));

        public override SyntaxNode? VisitQualifiedNameEx(QualifiedNameEx node)
            => node.Update((NameEx?)Visit(node.Left) ?? throw new ArgumentNullException("left"), VisitToken(node.DotToken), (SimpleNameEx?)Visit(node.Right) ?? throw new ArgumentNullException("right"));

        public override SyntaxNode? VisitIdentifierEx(IdentifierEx node)
            => node.Update(VisitToken(node.Identifier));

        public override SyntaxNode? VisitGenericEx(GenericEx node)
            => node.Update(VisitToken(node.Identifier), (TypeArgumentListSyntax?)Visit(node.TypeArgumentList) ?? throw new ArgumentNullException("typeArgumentList"));

        public override SyntaxNode? VisitPredefinedTypeEx(PredefinedTypeEx node)
            => node.Update(VisitToken(node.Keyword));

        public override SyntaxNode? VisitArrayTypeEx(ArrayTypeEx node)
            => node.Update((TypeEx?)Visit(node.ElementType) ?? throw new ArgumentNullException("elementType"), VisitList(node.RankSpecifiers));

        public override SyntaxNode? VisitUnionTypeEx(UnionTypeEx node)
            => node.Update(VisitToken(node.OpenParenToken), VisitList(node.Types), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitRefTypeEx(RefTypeEx node)
            => node.Update(VisitToken(node.RefKeyword), VisitToken(node.ReadOnlyKeyword), (TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"));

        public override SyntaxNode? VisitTypeArgumentList(TypeArgumentListSyntax node)
            => node.Update(VisitToken(node.LessThanToken), VisitList(node.Arguments), VisitToken(node.GreaterThanToken));

        public override SyntaxNode? VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
            => node.Update(VisitToken(node.OpenBracketToken), VisitList(node.Sizes), VisitToken(node.CloseBracketToken));

        public override SyntaxNode? VisitOmittedArraySizeEx(OmittedArraySizeEx node)
            => node.Update(VisitToken(node.OmittedArraySizeExpressionToken));

        public override SyntaxNode? VisitParameterList(ParameterListSyntax node)
            => node.Update(VisitToken(node.OpenParenToken), VisitList(node.Parameters), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitBracketedParameterList(BracketedParameterListSyntax node)
            => node.Update(VisitToken(node.OpenBracketToken), VisitList(node.Parameters), VisitToken(node.CloseBracketToken));

        public override SyntaxNode? VisitParameter(ParameterSyntax node)
            => node.Update(VisitList(node.AttributeLists), VisitList(node.Modifiers), (TypeEx?)Visit(node.Type), VisitToken(node.Identifier), (EqualsValueClauseSyntax?)Visit(node.Default));

        public override SyntaxNode? VisitFunctionPointerParameter(FunctionPointerParameterSyntax node)
            => node.Update(VisitList(node.AttributeLists), VisitList(node.Modifiers), (TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"));

        public override SyntaxNode? VisitIncompleteMember(IncompleteMemberSyntax node)
            => node.Update(VisitList(node.AttributeLists), VisitList(node.Modifiers), (TypeEx?)Visit(node.Type));

        public override SyntaxNode? VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
            => node.Update(VisitList(node.Tokens));

        public override SyntaxNode? VisitEqualsValueClause(EqualsValueClauseSyntax node)
            => node.Update(VisitToken(node.EqualsToken), (ExprSyntax?)Visit(node.Value) ?? throw new ArgumentNullException("value"));

        public override SyntaxNode? VisitVariableDecl(VariableDecl node)
            => node.Update((TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"), VisitList(node.Variables));

        public override SyntaxNode? VisitVariableInit(VariableInit node)
            => node.Update(VisitToken(node.Identifier), (BracketedArgumentListSyntax?)Visit(node.ArgumentList), (EqualsValueClauseSyntax?)Visit(node.Initializer));

        public override SyntaxNode? VisitBlockStmt(BlockStmt node)
            => node.Update(VisitToken(node.OpenBraceToken), VisitList(node.Statements), VisitToken(node.CloseBraceToken));

        public override SyntaxNode? VisitExpressionStmt(ExpressionStmt node)
            => node.Update((ExprSyntax?)Visit(node.Expression) ?? throw new ArgumentNullException("expression"), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitEmptyStmt(EmptyStmt node)
            => node.Update(VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitLabeledStmt(LabeledStmt node)
            => node.Update(VisitToken(node.Identifier), VisitToken(node.ColonToken), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"));

        public override SyntaxNode? VisitGotoStmt(GotoStmt node)
            => node.Update(VisitToken(node.GotoKeyword), VisitToken(node.CaseOrDefaultKeyword), (ExprSyntax?)Visit(node.Expression), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitBreakStmt(BreakStmt node)
            => node.Update(VisitToken(node.BreakKeyword), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitContinueStmt(ContinueStmt node)
            => node.Update(VisitToken(node.ContinueKeyword), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitReturnStmt(ReturnStmt node)
            => node.Update(VisitToken(node.ReturnKeyword), (ExprSyntax?)Visit(node.Expression), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitThrowStmt(ThrowStmt node)
            => node.Update(VisitToken(node.ThrowKeyword), (ExprSyntax?)Visit(node.Expression), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitYieldStmt(YieldStmt node)
            => node.Update(VisitToken(node.YieldKeyword), VisitToken(node.ReturnOrBreakKeyword), (ExprSyntax?)Visit(node.Expression), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitWhileStmt(WhileStmt node)
            => node.Update(VisitToken(node.WhileKeyword), VisitToken(node.OpenParenToken), (ExprSyntax?)Visit(node.Condition) ?? throw new ArgumentNullException("condition"), VisitToken(node.CloseParenToken), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"));

        public override SyntaxNode? VisitDoStmt(DoStmt node)
            => node.Update(VisitToken(node.DoKeyword), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"), VisitToken(node.WhileKeyword), VisitToken(node.OpenParenToken), (ExprSyntax?)Visit(node.Condition) ?? throw new ArgumentNullException("condition"), VisitToken(node.CloseParenToken), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitForStmt(ForStmt node)
            => node.Update(VisitToken(node.ForKeyword), VisitToken(node.OpenParenToken), (VariableDecl?)Visit(node.Declaration), VisitList(node.Initializers), VisitToken(node.FirstSemicolonToken), (ExprSyntax?)Visit(node.Condition), VisitToken(node.SecondSemicolonToken), VisitList(node.Incrementors), VisitToken(node.CloseParenToken), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"));

        public override SyntaxNode? VisitLocalDeclStmt(LocalDeclStmt node)
            => node.Update(VisitList(node.AttributeLists), VisitList(node.Modifiers), (VariableDecl?)Visit(node.Declaration) ?? throw new ArgumentNullException("declaration"), VisitToken(node.SemicolonToken));

        public override SyntaxNode? VisitIfStmt(IfStmt node)
            => node.Update(VisitToken(node.IfKeyword), VisitToken(node.OpenParenToken), (ExprSyntax?)Visit(node.Condition) ?? throw new ArgumentNullException("condition"), VisitToken(node.CloseParenToken), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"), (ElseClauseSyntax?)Visit(node.Else));

        public override SyntaxNode? VisitElseClause(ElseClauseSyntax node)
            => node.Update(VisitToken(node.ElseKeyword), (StmtSyntax?)Visit(node.Statement) ?? throw new ArgumentNullException("statement"));

        public override SyntaxNode? VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
            => node.Update(VisitList(node.Content), VisitToken(node.EndOfComment));

        public override SyntaxNode? VisitTypeCref(TypeCrefSyntax node)
            => node.Update((TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"));

        public override SyntaxNode? VisitQualifiedCref(QualifiedCrefSyntax node)
            => node.Update((TypeEx?)Visit(node.Container) ?? throw new ArgumentNullException("container"), VisitToken(node.DotToken), (MemberCrefSyntax?)Visit(node.Member) ?? throw new ArgumentNullException("member"));

        public override SyntaxNode? VisitNameMemberCref(NameMemberCrefSyntax node)
            => node.Update((TypeEx?)Visit(node.Name) ?? throw new ArgumentNullException("name"), (CrefParameterListSyntax?)Visit(node.Parameters));

        public override SyntaxNode? VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
            => node.Update(VisitToken(node.ThisKeyword), (CrefBracketedParameterListSyntax?)Visit(node.Parameters));

        public override SyntaxNode? VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
            => node.Update(VisitToken(node.OperatorKeyword), VisitToken(node.OperatorToken), (CrefParameterListSyntax?)Visit(node.Parameters));

        public override SyntaxNode? VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
            => node.Update(VisitToken(node.ImplicitOrExplicitKeyword), VisitToken(node.OperatorKeyword), (TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"), (CrefParameterListSyntax?)Visit(node.Parameters));

        public override SyntaxNode? VisitCrefParameterList(CrefParameterListSyntax node)
            => node.Update(VisitToken(node.OpenParenToken), VisitList(node.Parameters), VisitToken(node.CloseParenToken));

        public override SyntaxNode? VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
            => node.Update(VisitToken(node.OpenBracketToken), VisitList(node.Parameters), VisitToken(node.CloseBracketToken));

        public override SyntaxNode? VisitCrefParameter(CrefParameterSyntax node)
            => node.Update(VisitToken(node.RefKindKeyword), (TypeEx?)Visit(node.Type) ?? throw new ArgumentNullException("type"));

        public override SyntaxNode? VisitXmlElement(XmlElementSyntax node)
            => node.Update((XmlElementStartTagSyntax?)Visit(node.StartTag) ?? throw new ArgumentNullException("startTag"), VisitList(node.Content), (XmlElementEndTagSyntax?)Visit(node.EndTag) ?? throw new ArgumentNullException("endTag"));

        public override SyntaxNode? VisitXmlElementStartTag(XmlElementStartTagSyntax node)
            => node.Update(VisitToken(node.LessThanToken), (XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitList(node.Attributes), VisitToken(node.GreaterThanToken));

        public override SyntaxNode? VisitXmlElementEndTag(XmlElementEndTagSyntax node)
            => node.Update(VisitToken(node.LessThanSlashToken), (XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.GreaterThanToken));

        public override SyntaxNode? VisitXmlEmptyElement(XmlEmptyElementSyntax node)
            => node.Update(VisitToken(node.LessThanToken), (XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitList(node.Attributes), VisitToken(node.SlashGreaterThanToken));

        public override SyntaxNode? VisitXmlName(XmlNameSyntax node)
            => node.Update((XmlPrefixSyntax?)Visit(node.Prefix), VisitToken(node.LocalName));

        public override SyntaxNode? VisitXmlPrefix(XmlPrefixSyntax node)
            => node.Update(VisitToken(node.Prefix), VisitToken(node.ColonToken));

        public override SyntaxNode? VisitXmlTextAttribute(XmlTextAttributeSyntax node)
            => node.Update((XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.EqualsToken), VisitToken(node.StartQuoteToken), VisitList(node.TextTokens), VisitToken(node.EndQuoteToken));

        public override SyntaxNode? VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
            => node.Update((XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.EqualsToken), VisitToken(node.StartQuoteToken), (CrefSyntax?)Visit(node.Cref) ?? throw new ArgumentNullException("cref"), VisitToken(node.EndQuoteToken));

        public override SyntaxNode? VisitXmlNameAttribute(XmlNameAttributeSyntax node)
            => node.Update((XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitToken(node.EqualsToken), VisitToken(node.StartQuoteToken), (IdentifierEx?)Visit(node.Identifier) ?? throw new ArgumentNullException("identifier"), VisitToken(node.EndQuoteToken));

        public override SyntaxNode? VisitXmlText(XmlTextSyntax node)
            => node.Update(VisitList(node.TextTokens));

        public override SyntaxNode? VisitXmlCDataSection(XmlCDataSectionSyntax node)
            => node.Update(VisitToken(node.StartCDataToken), VisitList(node.TextTokens), VisitToken(node.EndCDataToken));

        public override SyntaxNode? VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
            => node.Update(VisitToken(node.StartProcessingInstructionToken), (XmlNameSyntax?)Visit(node.Name) ?? throw new ArgumentNullException("name"), VisitList(node.TextTokens), VisitToken(node.EndProcessingInstructionToken));

        public override SyntaxNode? VisitXmlComment(XmlCommentSyntax node)
            => node.Update(VisitToken(node.LessThanExclamationMinusMinusToken), VisitList(node.TextTokens), VisitToken(node.MinusMinusGreaterThanToken));
    }

    public static partial class SyntaxFactory
    {
        /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
        public static CompilationUnitSyntax CompilationUnit(SyntaxList<ImportDecl> imports, SyntaxList<MethodDecl> methods, SyntaxList<ExtendDecl> extends, SyntaxList<ComponentDecl> components, SyntaxToken endOfFileToken)
        {
            if (endOfFileToken.Kind() != SyntaxKind.EndOfFileToken) throw new ArgumentException(nameof(endOfFileToken));
            return (CompilationUnitSyntax)Syntax.InternalSyntax.SyntaxFactory.CompilationUnit(imports.Node.ToGreenList<Syntax.InternalSyntax.ImportDecl>(), methods.Node.ToGreenList<Syntax.InternalSyntax.MethodDecl>(), extends.Node.ToGreenList<Syntax.InternalSyntax.ExtendDecl>(), components.Node.ToGreenList<Syntax.InternalSyntax.ComponentDecl>(), (Syntax.InternalSyntax.SyntaxToken)endOfFileToken.Node!).CreateRed();
        }

        /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
        public static CompilationUnitSyntax CompilationUnit(SyntaxList<ImportDecl> imports, SyntaxList<MethodDecl> methods, SyntaxList<ExtendDecl> extends, SyntaxList<ComponentDecl> components)
            => SyntaxFactory.CompilationUnit(imports, methods, extends, components, SyntaxFactory.Token(SyntaxKind.EndOfFileToken));

        /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
        public static CompilationUnitSyntax CompilationUnit()
            => SyntaxFactory.CompilationUnit(default, default, default, default, SyntaxFactory.Token(SyntaxKind.EndOfFileToken));

        /// <summary>Creates a new ImportDecl instance.</summary>
        public static ImportDecl ImportDecl(SyntaxToken importKeyword, NameEx name, SyntaxToken semicolonToken)
        {
            if (importKeyword.Kind() != SyntaxKind.ImportKeyword) throw new ArgumentException(nameof(importKeyword));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (ImportDecl)Syntax.InternalSyntax.SyntaxFactory.ImportDecl((Syntax.InternalSyntax.SyntaxToken)importKeyword.Node!, (Syntax.InternalSyntax.NameEx)name.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ImportDecl instance.</summary>
        public static ImportDecl ImportDecl(NameEx name)
            => SyntaxFactory.ImportDecl(SyntaxFactory.Token(SyntaxKind.ImportKeyword), name, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new MethodDecl instance.</summary>
        public static MethodDecl MethodDecl(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeEx returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, BlockStmt? body, ArrowExClause? expressionBody, SyntaxToken semicolonToken)
        {
            if (returnType == null) throw new ArgumentNullException(nameof(returnType));
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            if (parameterList == null) throw new ArgumentNullException(nameof(parameterList));
            switch (semicolonToken.Kind())
            {
                case SyntaxKind.SemicolonToken:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(semicolonToken));
            }
            return (MethodDecl)Syntax.InternalSyntax.SyntaxFactory.MethodDecl(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), modifiers.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.TypeEx)returnType.Green, (Syntax.InternalSyntax.SyntaxToken)identifier.Node!, typeParameterList == null ? null : (Syntax.InternalSyntax.TypeParameterListSyntax)typeParameterList.Green, (Syntax.InternalSyntax.ParameterListSyntax)parameterList.Green, body == null ? null : (Syntax.InternalSyntax.BlockStmt)body.Green, expressionBody == null ? null : (Syntax.InternalSyntax.ArrowExClause)expressionBody.Green, (Syntax.InternalSyntax.SyntaxToken?)semicolonToken.Node).CreateRed();
        }

        /// <summary>Creates a new MethodDecl instance.</summary>
        public static MethodDecl MethodDecl(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeEx returnType, SyntaxToken identifier, TypeParameterListSyntax? typeParameterList, ParameterListSyntax parameterList, BlockStmt? body, ArrowExClause? expressionBody)
            => SyntaxFactory.MethodDecl(attributeLists, modifiers, returnType, identifier, typeParameterList, parameterList, body, expressionBody, default);

        /// <summary>Creates a new MethodDecl instance.</summary>
        public static MethodDecl MethodDecl(TypeEx returnType, SyntaxToken identifier)
            => SyntaxFactory.MethodDecl(default, default(SyntaxTokenList), returnType, identifier, default, SyntaxFactory.ParameterList(), default, default, default);

        /// <summary>Creates a new MethodDecl instance.</summary>
        public static MethodDecl MethodDecl(TypeEx returnType, string identifier)
            => SyntaxFactory.MethodDecl(default, default(SyntaxTokenList), returnType, SyntaxFactory.Identifier(identifier), default, SyntaxFactory.ParameterList(), default, default, default);

        /// <summary>Creates a new ExtendDecl instance.</summary>
        public static ExtendDecl ExtendDecl(SyntaxToken extendKeyword, NameEx name, SyntaxToken openBraceToken, SyntaxList<MethodDecl> methods, SyntaxToken closeBraceToken)
        {
            if (extendKeyword.Kind() != SyntaxKind.ExtendKeyword) throw new ArgumentException(nameof(extendKeyword));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (openBraceToken.Kind() != SyntaxKind.OpenBraceToken) throw new ArgumentException(nameof(openBraceToken));
            if (closeBraceToken.Kind() != SyntaxKind.CloseBraceToken) throw new ArgumentException(nameof(closeBraceToken));
            return (ExtendDecl)Syntax.InternalSyntax.SyntaxFactory.ExtendDecl((Syntax.InternalSyntax.SyntaxToken)extendKeyword.Node!, (Syntax.InternalSyntax.NameEx)name.Green, (Syntax.InternalSyntax.SyntaxToken)openBraceToken.Node!, methods.Node.ToGreenList<Syntax.InternalSyntax.MethodDecl>(), (Syntax.InternalSyntax.SyntaxToken)closeBraceToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ExtendDecl instance.</summary>
        public static ExtendDecl ExtendDecl(NameEx name, SyntaxList<MethodDecl> methods)
            => SyntaxFactory.ExtendDecl(SyntaxFactory.Token(SyntaxKind.ExtendKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), methods, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new ExtendDecl instance.</summary>
        public static ExtendDecl ExtendDecl(NameEx name)
            => SyntaxFactory.ExtendDecl(SyntaxFactory.Token(SyntaxKind.ExtendKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), default, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new ComponentDecl instance.</summary>
        public static ComponentDecl ComponentDecl(SyntaxToken componentKeyword, NameEx name, SyntaxList<ExtendDecl> extends)
        {
            if (componentKeyword.Kind() != SyntaxKind.ComponentKeyword) throw new ArgumentException(nameof(componentKeyword));
            if (name == null) throw new ArgumentNullException(nameof(name));
            return (ComponentDecl)Syntax.InternalSyntax.SyntaxFactory.ComponentDecl((Syntax.InternalSyntax.SyntaxToken)componentKeyword.Node!, (Syntax.InternalSyntax.NameEx)name.Green, extends.Node.ToGreenList<Syntax.InternalSyntax.ExtendDecl>()).CreateRed();
        }

        /// <summary>Creates a new ComponentDecl instance.</summary>
        public static ComponentDecl ComponentDecl(NameEx name, SyntaxList<ExtendDecl> extends)
            => SyntaxFactory.ComponentDecl(SyntaxFactory.Token(SyntaxKind.ComponentKeyword), name, extends);

        /// <summary>Creates a new ComponentDecl instance.</summary>
        public static ComponentDecl ComponentDecl(NameEx name)
            => SyntaxFactory.ComponentDecl(SyntaxFactory.Token(SyntaxKind.ComponentKeyword), name, default);

        /// <summary>Creates a new AttributeListSyntax instance.</summary>
        public static AttributeListSyntax AttributeList(SyntaxToken openBracketToken, SeparatedSyntaxList<AttributeSyntax> attributes, SyntaxToken closeBracketToken)
        {
            if (openBracketToken.Kind() != SyntaxKind.OpenBracketToken) throw new ArgumentException(nameof(openBracketToken));
            if (closeBracketToken.Kind() != SyntaxKind.CloseBracketToken) throw new ArgumentException(nameof(closeBracketToken));
            return (AttributeListSyntax)Syntax.InternalSyntax.SyntaxFactory.AttributeList((Syntax.InternalSyntax.SyntaxToken)openBracketToken.Node!, attributes.Node.ToGreenSeparatedList<Syntax.InternalSyntax.AttributeSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBracketToken.Node!).CreateRed();
        }

        /// <summary>Creates a new AttributeListSyntax instance.</summary>
        public static AttributeListSyntax AttributeList(SeparatedSyntaxList<AttributeSyntax> attributes = default)
            => SyntaxFactory.AttributeList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), attributes, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        /// <summary>Creates a new AttributeSyntax instance.</summary>
        public static AttributeSyntax Attribute(NameEx name, AttributeArgumentListSyntax? argumentList)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            return (AttributeSyntax)Syntax.InternalSyntax.SyntaxFactory.Attribute((Syntax.InternalSyntax.NameEx)name.Green, argumentList == null ? null : (Syntax.InternalSyntax.AttributeArgumentListSyntax)argumentList.Green).CreateRed();
        }

        /// <summary>Creates a new AttributeSyntax instance.</summary>
        public static AttributeSyntax Attribute(NameEx name)
            => SyntaxFactory.Attribute(name, default);

        /// <summary>Creates a new AttributeArgumentListSyntax instance.</summary>
        public static AttributeArgumentListSyntax AttributeArgumentList(SyntaxToken openParenToken, SeparatedSyntaxList<AttributeArgumentSyntax> arguments, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (AttributeArgumentListSyntax)Syntax.InternalSyntax.SyntaxFactory.AttributeArgumentList((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, arguments.Node.ToGreenSeparatedList<Syntax.InternalSyntax.AttributeArgumentSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new AttributeArgumentListSyntax instance.</summary>
        public static AttributeArgumentListSyntax AttributeArgumentList(SeparatedSyntaxList<AttributeArgumentSyntax> arguments = default)
            => SyntaxFactory.AttributeArgumentList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), arguments, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new AttributeArgumentSyntax instance.</summary>
        public static AttributeArgumentSyntax AttributeArgument(NameEqualsSyntax? nameEquals, ExprSyntax expression)
        {
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            return (AttributeArgumentSyntax)Syntax.InternalSyntax.SyntaxFactory.AttributeArgument(nameEquals == null ? null : (Syntax.InternalSyntax.NameEqualsSyntax)nameEquals.Green, (Syntax.InternalSyntax.ExprSyntax)expression.Green).CreateRed();
        }

        /// <summary>Creates a new AttributeArgumentSyntax instance.</summary>
        public static AttributeArgumentSyntax AttributeArgument(ExprSyntax expression)
            => SyntaxFactory.AttributeArgument(default, expression);

        /// <summary>Creates a new NameEqualsSyntax instance.</summary>
        public static NameEqualsSyntax NameEquals(IdentifierEx name, SyntaxToken equalsToken)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (equalsToken.Kind() != SyntaxKind.EqualsToken) throw new ArgumentException(nameof(equalsToken));
            return (NameEqualsSyntax)Syntax.InternalSyntax.SyntaxFactory.NameEquals((Syntax.InternalSyntax.IdentifierEx)name.Green, (Syntax.InternalSyntax.SyntaxToken)equalsToken.Node!).CreateRed();
        }

        /// <summary>Creates a new NameEqualsSyntax instance.</summary>
        public static NameEqualsSyntax NameEquals(IdentifierEx name)
            => SyntaxFactory.NameEquals(name, SyntaxFactory.Token(SyntaxKind.EqualsToken));

        /// <summary>Creates a new TypeParameterListSyntax instance.</summary>
        public static TypeParameterListSyntax TypeParameterList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeParameterSyntax> parameters, SyntaxToken greaterThanToken)
        {
            if (lessThanToken.Kind() != SyntaxKind.LessThanToken) throw new ArgumentException(nameof(lessThanToken));
            if (greaterThanToken.Kind() != SyntaxKind.GreaterThanToken) throw new ArgumentException(nameof(greaterThanToken));
            return (TypeParameterListSyntax)Syntax.InternalSyntax.SyntaxFactory.TypeParameterList((Syntax.InternalSyntax.SyntaxToken)lessThanToken.Node!, parameters.Node.ToGreenSeparatedList<Syntax.InternalSyntax.TypeParameterSyntax>(), (Syntax.InternalSyntax.SyntaxToken)greaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new TypeParameterListSyntax instance.</summary>
        public static TypeParameterListSyntax TypeParameterList(SeparatedSyntaxList<TypeParameterSyntax> parameters = default)
            => SyntaxFactory.TypeParameterList(SyntaxFactory.Token(SyntaxKind.LessThanToken), parameters, SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        /// <summary>Creates a new TypeParameterSyntax instance.</summary>
        public static TypeParameterSyntax TypeParameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxToken varianceKeyword, SyntaxToken identifier)
        {
            switch (varianceKeyword.Kind())
            {
                case SyntaxKind.InKeyword:
                case SyntaxKind.OutKeyword:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(varianceKeyword));
            }
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            return (TypeParameterSyntax)Syntax.InternalSyntax.SyntaxFactory.TypeParameter(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), (Syntax.InternalSyntax.SyntaxToken?)varianceKeyword.Node, (Syntax.InternalSyntax.SyntaxToken)identifier.Node!).CreateRed();
        }

        /// <summary>Creates a new TypeParameterSyntax instance.</summary>
        public static TypeParameterSyntax TypeParameter(SyntaxToken identifier)
            => SyntaxFactory.TypeParameter(default, default, identifier);

        /// <summary>Creates a new TypeParameterSyntax instance.</summary>
        public static TypeParameterSyntax TypeParameter(string identifier)
            => SyntaxFactory.TypeParameter(default, default, SyntaxFactory.Identifier(identifier));

        /// <summary>Creates a new BinaryEx instance.</summary>
        public static BinaryEx BinaryEx(SyntaxKind kind, ExprSyntax left, SyntaxToken operatorToken, ExprSyntax right)
        {
            switch (kind)
            {
                case SyntaxKind.AddExpression:
                case SyntaxKind.SubtractExpression:
                case SyntaxKind.MultiplyExpression:
                case SyntaxKind.DivideExpression:
                case SyntaxKind.ModuloExpression:
                case SyntaxKind.LeftShiftExpression:
                case SyntaxKind.RightShiftExpression:
                case SyntaxKind.LogicalOrExpression:
                case SyntaxKind.LogicalAndExpression:
                case SyntaxKind.BitwiseOrExpression:
                case SyntaxKind.BitwiseAndExpression:
                case SyntaxKind.ExclusiveOrExpression:
                case SyntaxKind.EqualsExpression:
                case SyntaxKind.NotEqualsExpression:
                case SyntaxKind.LessThanExpression:
                case SyntaxKind.LessThanOrEqualExpression:
                case SyntaxKind.GreaterThanExpression:
                case SyntaxKind.GreaterThanOrEqualExpression:
                case SyntaxKind.IsExpression:
                case SyntaxKind.AsExpression:
                case SyntaxKind.CoalesceExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (left == null) throw new ArgumentNullException(nameof(left));
            switch (operatorToken.Kind())
            {
                case SyntaxKind.PlusToken:
                case SyntaxKind.MinusToken:
                case SyntaxKind.AsteriskToken:
                case SyntaxKind.SlashToken:
                case SyntaxKind.PercentToken:
                case SyntaxKind.LessThanLessThanToken:
                case SyntaxKind.GreaterThanGreaterThanToken:
                case SyntaxKind.BarBarToken:
                case SyntaxKind.AmpersandAmpersandToken:
                case SyntaxKind.BarToken:
                case SyntaxKind.AmpersandToken:
                case SyntaxKind.CaretToken:
                case SyntaxKind.EqualsEqualsToken:
                case SyntaxKind.ExclamationEqualsToken:
                case SyntaxKind.LessThanToken:
                case SyntaxKind.LessThanEqualsToken:
                case SyntaxKind.GreaterThanToken:
                case SyntaxKind.GreaterThanEqualsToken:
                case SyntaxKind.IsKeyword:
                case SyntaxKind.AsKeyword:
                case SyntaxKind.QuestionQuestionToken: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            if (right == null) throw new ArgumentNullException(nameof(right));
            return (BinaryEx)Syntax.InternalSyntax.SyntaxFactory.BinaryEx(kind, (Syntax.InternalSyntax.ExprSyntax)left.Green, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, (Syntax.InternalSyntax.ExprSyntax)right.Green).CreateRed();
        }

        /// <summary>Creates a new BinaryEx instance.</summary>
        public static BinaryEx BinaryEx(SyntaxKind kind, ExprSyntax left, ExprSyntax right)
            => SyntaxFactory.BinaryEx(kind, left, SyntaxFactory.Token(GetBinaryExOperatorTokenKind(kind)), right);

        private static SyntaxKind GetBinaryExOperatorTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.AddExpression => SyntaxKind.PlusToken,
                SyntaxKind.SubtractExpression => SyntaxKind.MinusToken,
                SyntaxKind.MultiplyExpression => SyntaxKind.AsteriskToken,
                SyntaxKind.DivideExpression => SyntaxKind.SlashToken,
                SyntaxKind.ModuloExpression => SyntaxKind.PercentToken,
                SyntaxKind.LeftShiftExpression => SyntaxKind.LessThanLessThanToken,
                SyntaxKind.RightShiftExpression => SyntaxKind.GreaterThanGreaterThanToken,
                SyntaxKind.LogicalOrExpression => SyntaxKind.BarBarToken,
                SyntaxKind.LogicalAndExpression => SyntaxKind.AmpersandAmpersandToken,
                SyntaxKind.BitwiseOrExpression => SyntaxKind.BarToken,
                SyntaxKind.BitwiseAndExpression => SyntaxKind.AmpersandToken,
                SyntaxKind.ExclusiveOrExpression => SyntaxKind.CaretToken,
                SyntaxKind.EqualsExpression => SyntaxKind.EqualsEqualsToken,
                SyntaxKind.NotEqualsExpression => SyntaxKind.ExclamationEqualsToken,
                SyntaxKind.LessThanExpression => SyntaxKind.LessThanToken,
                SyntaxKind.LessThanOrEqualExpression => SyntaxKind.LessThanEqualsToken,
                SyntaxKind.GreaterThanExpression => SyntaxKind.GreaterThanToken,
                SyntaxKind.GreaterThanOrEqualExpression => SyntaxKind.GreaterThanEqualsToken,
                SyntaxKind.IsExpression => SyntaxKind.IsKeyword,
                SyntaxKind.AsExpression => SyntaxKind.AsKeyword,
                SyntaxKind.CoalesceExpression => SyntaxKind.QuestionQuestionToken,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new ParenthesizedEx instance.</summary>
        public static ParenthesizedEx ParenthesizedEx(SyntaxToken openParenToken, ExprSyntax expression, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (ParenthesizedEx)Syntax.InternalSyntax.SyntaxFactory.ParenthesizedEx((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ParenthesizedEx instance.</summary>
        public static ParenthesizedEx ParenthesizedEx(ExprSyntax expression)
            => SyntaxFactory.ParenthesizedEx(SyntaxFactory.Token(SyntaxKind.OpenParenToken), expression, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new PrefixUnaryEx instance.</summary>
        public static PrefixUnaryEx PrefixUnaryEx(SyntaxKind kind, SyntaxToken operatorToken, ExprSyntax operand)
        {
            switch (kind)
            {
                case SyntaxKind.UnaryPlusExpression:
                case SyntaxKind.UnaryMinusExpression:
                case SyntaxKind.BitwiseNotExpression:
                case SyntaxKind.LogicalNotExpression:
                case SyntaxKind.PreIncrementExpression:
                case SyntaxKind.PreDecrementExpression:
                case SyntaxKind.AddressOfExpression:
                case SyntaxKind.PointerIndirectionExpression:
                case SyntaxKind.IndexExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            switch (operatorToken.Kind())
            {
                case SyntaxKind.PlusToken:
                case SyntaxKind.MinusToken:
                case SyntaxKind.TildeToken:
                case SyntaxKind.ExclamationToken:
                case SyntaxKind.PlusPlusToken:
                case SyntaxKind.MinusMinusToken:
                case SyntaxKind.AmpersandToken:
                case SyntaxKind.AsteriskToken:
                case SyntaxKind.CaretToken: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            if (operand == null) throw new ArgumentNullException(nameof(operand));
            return (PrefixUnaryEx)Syntax.InternalSyntax.SyntaxFactory.PrefixUnaryEx(kind, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, (Syntax.InternalSyntax.ExprSyntax)operand.Green).CreateRed();
        }

        /// <summary>Creates a new PrefixUnaryEx instance.</summary>
        public static PrefixUnaryEx PrefixUnaryEx(SyntaxKind kind, ExprSyntax operand)
            => SyntaxFactory.PrefixUnaryEx(kind, SyntaxFactory.Token(GetPrefixUnaryExOperatorTokenKind(kind)), operand);

        private static SyntaxKind GetPrefixUnaryExOperatorTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.UnaryPlusExpression => SyntaxKind.PlusToken,
                SyntaxKind.UnaryMinusExpression => SyntaxKind.MinusToken,
                SyntaxKind.BitwiseNotExpression => SyntaxKind.TildeToken,
                SyntaxKind.LogicalNotExpression => SyntaxKind.ExclamationToken,
                SyntaxKind.PreIncrementExpression => SyntaxKind.PlusPlusToken,
                SyntaxKind.PreDecrementExpression => SyntaxKind.MinusMinusToken,
                SyntaxKind.AddressOfExpression => SyntaxKind.AmpersandToken,
                SyntaxKind.PointerIndirectionExpression => SyntaxKind.AsteriskToken,
                SyntaxKind.IndexExpression => SyntaxKind.CaretToken,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new PostfixUnaryEx instance.</summary>
        public static PostfixUnaryEx PostfixUnaryEx(SyntaxKind kind, ExprSyntax operand, SyntaxToken operatorToken)
        {
            switch (kind)
            {
                case SyntaxKind.PostIncrementExpression:
                case SyntaxKind.PostDecrementExpression:
                case SyntaxKind.SuppressNullableWarningExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (operand == null) throw new ArgumentNullException(nameof(operand));
            switch (operatorToken.Kind())
            {
                case SyntaxKind.PlusPlusToken:
                case SyntaxKind.MinusMinusToken:
                case SyntaxKind.ExclamationToken: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            return (PostfixUnaryEx)Syntax.InternalSyntax.SyntaxFactory.PostfixUnaryEx(kind, (Syntax.InternalSyntax.ExprSyntax)operand.Green, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!).CreateRed();
        }

        /// <summary>Creates a new PostfixUnaryEx instance.</summary>
        public static PostfixUnaryEx PostfixUnaryEx(SyntaxKind kind, ExprSyntax operand)
            => SyntaxFactory.PostfixUnaryEx(kind, operand, SyntaxFactory.Token(GetPostfixUnaryExOperatorTokenKind(kind)));

        private static SyntaxKind GetPostfixUnaryExOperatorTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.PostIncrementExpression => SyntaxKind.PlusPlusToken,
                SyntaxKind.PostDecrementExpression => SyntaxKind.MinusMinusToken,
                SyntaxKind.SuppressNullableWarningExpression => SyntaxKind.ExclamationToken,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new InvocationEx instance.</summary>
        public static InvocationEx InvocationEx(ExprSyntax expression, ArgumentListSyntax argumentList)
        {
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (argumentList == null) throw new ArgumentNullException(nameof(argumentList));
            return (InvocationEx)Syntax.InternalSyntax.SyntaxFactory.InvocationEx((Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.ArgumentListSyntax)argumentList.Green).CreateRed();
        }

        /// <summary>Creates a new InvocationEx instance.</summary>
        public static InvocationEx InvocationEx(ExprSyntax expression)
            => SyntaxFactory.InvocationEx(expression, SyntaxFactory.ArgumentList());

        /// <summary>Creates a new AssignEx instance.</summary>
        public static AssignEx AssignEx(SyntaxKind kind, ExprSyntax left, SyntaxToken operatorToken, ExprSyntax right)
        {
            switch (kind)
            {
                case SyntaxKind.SimpleAssignmentExpression:
                case SyntaxKind.AddAssignmentExpression:
                case SyntaxKind.SubtractAssignmentExpression:
                case SyntaxKind.MultiplyAssignmentExpression:
                case SyntaxKind.DivideAssignmentExpression:
                case SyntaxKind.ModuloAssignmentExpression:
                case SyntaxKind.AndAssignmentExpression:
                case SyntaxKind.ExclusiveOrAssignmentExpression:
                case SyntaxKind.OrAssignmentExpression:
                case SyntaxKind.LeftShiftAssignmentExpression:
                case SyntaxKind.RightShiftAssignmentExpression:
                case SyntaxKind.CoalesceAssignmentExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (left == null) throw new ArgumentNullException(nameof(left));
            switch (operatorToken.Kind())
            {
                case SyntaxKind.EqualsToken:
                case SyntaxKind.PlusEqualsToken:
                case SyntaxKind.MinusEqualsToken:
                case SyntaxKind.AsteriskEqualsToken:
                case SyntaxKind.SlashEqualsToken:
                case SyntaxKind.PercentEqualsToken:
                case SyntaxKind.AmpersandEqualsToken:
                case SyntaxKind.CaretEqualsToken:
                case SyntaxKind.BarEqualsToken:
                case SyntaxKind.LessThanLessThanEqualsToken:
                case SyntaxKind.GreaterThanGreaterThanEqualsToken:
                case SyntaxKind.QuestionQuestionEqualsToken: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            if (right == null) throw new ArgumentNullException(nameof(right));
            return (AssignEx)Syntax.InternalSyntax.SyntaxFactory.AssignEx(kind, (Syntax.InternalSyntax.ExprSyntax)left.Green, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, (Syntax.InternalSyntax.ExprSyntax)right.Green).CreateRed();
        }

        /// <summary>Creates a new AssignEx instance.</summary>
        public static AssignEx AssignEx(SyntaxKind kind, ExprSyntax left, ExprSyntax right)
            => SyntaxFactory.AssignEx(kind, left, SyntaxFactory.Token(GetAssignExOperatorTokenKind(kind)), right);

        private static SyntaxKind GetAssignExOperatorTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.SimpleAssignmentExpression => SyntaxKind.EqualsToken,
                SyntaxKind.AddAssignmentExpression => SyntaxKind.PlusEqualsToken,
                SyntaxKind.SubtractAssignmentExpression => SyntaxKind.MinusEqualsToken,
                SyntaxKind.MultiplyAssignmentExpression => SyntaxKind.AsteriskEqualsToken,
                SyntaxKind.DivideAssignmentExpression => SyntaxKind.SlashEqualsToken,
                SyntaxKind.ModuloAssignmentExpression => SyntaxKind.PercentEqualsToken,
                SyntaxKind.AndAssignmentExpression => SyntaxKind.AmpersandEqualsToken,
                SyntaxKind.ExclusiveOrAssignmentExpression => SyntaxKind.CaretEqualsToken,
                SyntaxKind.OrAssignmentExpression => SyntaxKind.BarEqualsToken,
                SyntaxKind.LeftShiftAssignmentExpression => SyntaxKind.LessThanLessThanEqualsToken,
                SyntaxKind.RightShiftAssignmentExpression => SyntaxKind.GreaterThanGreaterThanEqualsToken,
                SyntaxKind.CoalesceAssignmentExpression => SyntaxKind.QuestionQuestionEqualsToken,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new ElementAccessEx instance.</summary>
        public static ElementAccessEx ElementAccessEx(ExprSyntax expression, BracketedArgumentListSyntax argumentList)
        {
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (argumentList == null) throw new ArgumentNullException(nameof(argumentList));
            return (ElementAccessEx)Syntax.InternalSyntax.SyntaxFactory.ElementAccessEx((Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.BracketedArgumentListSyntax)argumentList.Green).CreateRed();
        }

        /// <summary>Creates a new ElementAccessEx instance.</summary>
        public static ElementAccessEx ElementAccessEx(ExprSyntax expression)
            => SyntaxFactory.ElementAccessEx(expression, SyntaxFactory.BracketedArgumentList());

        /// <summary>Creates a new MemberAccessEx instance.</summary>
        public static MemberAccessEx MemberAccessEx(SyntaxKind kind, ExprSyntax expression, SyntaxToken operatorToken, NameEx name)
        {
            switch (kind)
            {
                case SyntaxKind.SimpleMemberAccessExpression:
                case SyntaxKind.PointerMemberAccessExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            switch (operatorToken.Kind())
            {
                case SyntaxKind.DotToken:
                case SyntaxKind.MinusGreaterThanToken: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            if (name == null) throw new ArgumentNullException(nameof(name));
            return (MemberAccessEx)Syntax.InternalSyntax.SyntaxFactory.MemberAccessEx(kind, (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, (Syntax.InternalSyntax.NameEx)name.Green).CreateRed();
        }

        /// <summary>Creates a new MemberAccessEx instance.</summary>
        public static MemberAccessEx MemberAccessEx(SyntaxKind kind, ExprSyntax expression, NameEx name)
            => SyntaxFactory.MemberAccessEx(kind, expression, SyntaxFactory.Token(GetMemberAccessExOperatorTokenKind(kind)), name);

        private static SyntaxKind GetMemberAccessExOperatorTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.SimpleMemberAccessExpression => SyntaxKind.DotToken,
                SyntaxKind.PointerMemberAccessExpression => SyntaxKind.MinusGreaterThanToken,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new InterpolatedStringEx instance.</summary>
        public static InterpolatedStringEx InterpolatedStringEx(SyntaxToken stringStartToken, SyntaxList<InterpolatedStringContentSyntax> contents, SyntaxToken stringEndToken)
        {
            switch (stringStartToken.Kind())
            {
                case SyntaxKind.InterpolatedStringStartToken:
                case SyntaxKind.InterpolatedVerbatimStringStartToken: break;
                default: throw new ArgumentException(nameof(stringStartToken));
            }
            if (stringEndToken.Kind() != SyntaxKind.InterpolatedStringEndToken) throw new ArgumentException(nameof(stringEndToken));
            return (InterpolatedStringEx)Syntax.InternalSyntax.SyntaxFactory.InterpolatedStringEx((Syntax.InternalSyntax.SyntaxToken)stringStartToken.Node!, contents.Node.ToGreenList<Syntax.InternalSyntax.InterpolatedStringContentSyntax>(), (Syntax.InternalSyntax.SyntaxToken)stringEndToken.Node!).CreateRed();
        }

        /// <summary>Creates a new InterpolatedStringEx instance.</summary>
        public static InterpolatedStringEx InterpolatedStringEx(SyntaxToken stringStartToken, SyntaxList<InterpolatedStringContentSyntax> contents)
            => SyntaxFactory.InterpolatedStringEx(stringStartToken, contents, SyntaxFactory.Token(SyntaxKind.InterpolatedStringEndToken));

        /// <summary>Creates a new InterpolatedStringEx instance.</summary>
        public static InterpolatedStringEx InterpolatedStringEx(SyntaxToken stringStartToken)
            => SyntaxFactory.InterpolatedStringEx(stringStartToken, default, SyntaxFactory.Token(SyntaxKind.InterpolatedStringEndToken));

        /// <summary>Creates a new RangeEx instance.</summary>
        public static RangeEx RangeEx(ExprSyntax? leftOperand, SyntaxToken operatorToken, ExprSyntax? rightOperand)
        {
            if (operatorToken.Kind() != SyntaxKind.DotDotToken) throw new ArgumentException(nameof(operatorToken));
            return (RangeEx)Syntax.InternalSyntax.SyntaxFactory.RangeEx(leftOperand == null ? null : (Syntax.InternalSyntax.ExprSyntax)leftOperand.Green, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, rightOperand == null ? null : (Syntax.InternalSyntax.ExprSyntax)rightOperand.Green).CreateRed();
        }

        /// <summary>Creates a new RangeEx instance.</summary>
        public static RangeEx RangeEx(ExprSyntax? leftOperand, ExprSyntax? rightOperand)
            => SyntaxFactory.RangeEx(leftOperand, SyntaxFactory.Token(SyntaxKind.DotDotToken), rightOperand);

        /// <summary>Creates a new RangeEx instance.</summary>
        public static RangeEx RangeEx()
            => SyntaxFactory.RangeEx(default, SyntaxFactory.Token(SyntaxKind.DotDotToken), default);

        /// <summary>Creates a new ConditionalEx instance.</summary>
        public static ConditionalEx ConditionalEx(ExprSyntax condition, SyntaxToken questionToken, ExprSyntax whenTrue, SyntaxToken colonToken, ExprSyntax whenFalse)
        {
            if (condition == null) throw new ArgumentNullException(nameof(condition));
            if (questionToken.Kind() != SyntaxKind.QuestionToken) throw new ArgumentException(nameof(questionToken));
            if (whenTrue == null) throw new ArgumentNullException(nameof(whenTrue));
            if (colonToken.Kind() != SyntaxKind.ColonToken) throw new ArgumentException(nameof(colonToken));
            if (whenFalse == null) throw new ArgumentNullException(nameof(whenFalse));
            return (ConditionalEx)Syntax.InternalSyntax.SyntaxFactory.ConditionalEx((Syntax.InternalSyntax.ExprSyntax)condition.Green, (Syntax.InternalSyntax.SyntaxToken)questionToken.Node!, (Syntax.InternalSyntax.ExprSyntax)whenTrue.Green, (Syntax.InternalSyntax.SyntaxToken)colonToken.Node!, (Syntax.InternalSyntax.ExprSyntax)whenFalse.Green).CreateRed();
        }

        /// <summary>Creates a new ConditionalEx instance.</summary>
        public static ConditionalEx ConditionalEx(ExprSyntax condition, ExprSyntax whenTrue, ExprSyntax whenFalse)
            => SyntaxFactory.ConditionalEx(condition, SyntaxFactory.Token(SyntaxKind.QuestionToken), whenTrue, SyntaxFactory.Token(SyntaxKind.ColonToken), whenFalse);

        /// <summary>Creates a new ThrowEx instance.</summary>
        public static ThrowEx ThrowEx(SyntaxToken throwKeyword, ExprSyntax expression)
        {
            if (throwKeyword.Kind() != SyntaxKind.ThrowKeyword) throw new ArgumentException(nameof(throwKeyword));
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            return (ThrowEx)Syntax.InternalSyntax.SyntaxFactory.ThrowEx((Syntax.InternalSyntax.SyntaxToken)throwKeyword.Node!, (Syntax.InternalSyntax.ExprSyntax)expression.Green).CreateRed();
        }

        /// <summary>Creates a new ThrowEx instance.</summary>
        public static ThrowEx ThrowEx(ExprSyntax expression)
            => SyntaxFactory.ThrowEx(SyntaxFactory.Token(SyntaxKind.ThrowKeyword), expression);

        /// <summary>Creates a new LiteralEx instance.</summary>
        public static LiteralEx LiteralEx(SyntaxKind kind, SyntaxToken token)
        {
            switch (kind)
            {
                case SyntaxKind.ArgListExpression:
                case SyntaxKind.NumericLiteralExpression:
                case SyntaxKind.StringLiteralExpression:
                case SyntaxKind.CharacterLiteralExpression:
                case SyntaxKind.TrueLiteralExpression:
                case SyntaxKind.FalseLiteralExpression:
                case SyntaxKind.NullLiteralExpression:
                case SyntaxKind.DefaultLiteralExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            switch (token.Kind())
            {
                case SyntaxKind.ArgListKeyword:
                case SyntaxKind.NumericLiteralToken:
                case SyntaxKind.StringLiteralToken:
                case SyntaxKind.CharacterLiteralToken:
                case SyntaxKind.TrueKeyword:
                case SyntaxKind.FalseKeyword:
                case SyntaxKind.NullKeyword:
                case SyntaxKind.DefaultKeyword: break;
                default: throw new ArgumentException(nameof(token));
            }
            return (LiteralEx)Syntax.InternalSyntax.SyntaxFactory.LiteralEx(kind, (Syntax.InternalSyntax.SyntaxToken)token.Node!).CreateRed();
        }

        /// <summary>Creates a new LiteralEx instance.</summary>
        public static LiteralEx LiteralEx(SyntaxKind kind)
            => SyntaxFactory.LiteralEx(kind, SyntaxFactory.Token(GetLiteralExTokenKind(kind)));

        private static SyntaxKind GetLiteralExTokenKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.ArgListExpression => SyntaxKind.ArgListKeyword,
                SyntaxKind.NumericLiteralExpression => SyntaxKind.NumericLiteralToken,
                SyntaxKind.StringLiteralExpression => SyntaxKind.StringLiteralToken,
                SyntaxKind.CharacterLiteralExpression => SyntaxKind.CharacterLiteralToken,
                SyntaxKind.TrueLiteralExpression => SyntaxKind.TrueKeyword,
                SyntaxKind.FalseLiteralExpression => SyntaxKind.FalseKeyword,
                SyntaxKind.NullLiteralExpression => SyntaxKind.NullKeyword,
                SyntaxKind.DefaultLiteralExpression => SyntaxKind.DefaultKeyword,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new ArrowExClause instance.</summary>
        public static ArrowExClause ArrowExClause(SyntaxToken arrowToken, ExprSyntax expression)
        {
            if (arrowToken.Kind() != SyntaxKind.EqualsGreaterThanToken) throw new ArgumentException(nameof(arrowToken));
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            return (ArrowExClause)Syntax.InternalSyntax.SyntaxFactory.ArrowExClause((Syntax.InternalSyntax.SyntaxToken)arrowToken.Node!, (Syntax.InternalSyntax.ExprSyntax)expression.Green).CreateRed();
        }

        /// <summary>Creates a new ArrowExClause instance.</summary>
        public static ArrowExClause ArrowExClause(ExprSyntax expression)
            => SyntaxFactory.ArrowExClause(SyntaxFactory.Token(SyntaxKind.EqualsGreaterThanToken), expression);

        /// <summary>Creates a new InitializerEx instance.</summary>
        public static InitializerEx InitializerEx(SyntaxKind kind, SyntaxToken openBraceToken, SeparatedSyntaxList<ExprSyntax> expressions, SyntaxToken closeBraceToken)
        {
            switch (kind)
            {
                case SyntaxKind.ObjectInitializerExpression:
                case SyntaxKind.CollectionInitializerExpression:
                case SyntaxKind.ArrayInitializerExpression:
                case SyntaxKind.ComplexElementInitializerExpression:
                case SyntaxKind.WithInitializerExpression: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (openBraceToken.Kind() != SyntaxKind.OpenBraceToken) throw new ArgumentException(nameof(openBraceToken));
            if (closeBraceToken.Kind() != SyntaxKind.CloseBraceToken) throw new ArgumentException(nameof(closeBraceToken));
            return (InitializerEx)Syntax.InternalSyntax.SyntaxFactory.InitializerEx(kind, (Syntax.InternalSyntax.SyntaxToken)openBraceToken.Node!, expressions.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ExprSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBraceToken.Node!).CreateRed();
        }

        /// <summary>Creates a new InitializerEx instance.</summary>
        public static InitializerEx InitializerEx(SyntaxKind kind, SeparatedSyntaxList<ExprSyntax> expressions = default)
            => SyntaxFactory.InitializerEx(kind, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), expressions, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new MatchEx instance.</summary>
        public static MatchEx MatchEx(SyntaxToken matchKeyword, SyntaxToken openParenToken, ExprSyntax expression, SyntaxToken closeParenToken, SyntaxToken openBraceToken, SeparatedSyntaxList<MatchArm> arms, SyntaxToken closeBraceToken)
        {
            if (matchKeyword.Kind() != SyntaxKind.MatchKeyword) throw new ArgumentException(nameof(matchKeyword));
            switch (openParenToken.Kind())
            {
                case SyntaxKind.OpenParenToken:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(openParenToken));
            }
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            switch (closeParenToken.Kind())
            {
                case SyntaxKind.CloseParenToken:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(closeParenToken));
            }
            if (openBraceToken.Kind() != SyntaxKind.OpenBraceToken) throw new ArgumentException(nameof(openBraceToken));
            if (closeBraceToken.Kind() != SyntaxKind.CloseBraceToken) throw new ArgumentException(nameof(closeBraceToken));
            return (MatchEx)Syntax.InternalSyntax.SyntaxFactory.MatchEx((Syntax.InternalSyntax.SyntaxToken)matchKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken?)openParenToken.Node, (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken?)closeParenToken.Node, (Syntax.InternalSyntax.SyntaxToken)openBraceToken.Node!, arms.Node.ToGreenSeparatedList<Syntax.InternalSyntax.MatchArm>(), (Syntax.InternalSyntax.SyntaxToken)closeBraceToken.Node!).CreateRed();
        }

        /// <summary>Creates a new MatchEx instance.</summary>
        public static MatchEx MatchEx(ExprSyntax expression, SeparatedSyntaxList<MatchArm> arms)
            => SyntaxFactory.MatchEx(SyntaxFactory.Token(SyntaxKind.MatchKeyword), default, expression, default, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), arms, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new MatchEx instance.</summary>
        public static MatchEx MatchEx(ExprSyntax expression)
            => SyntaxFactory.MatchEx(SyntaxFactory.Token(SyntaxKind.MatchKeyword), default, expression, default, SyntaxFactory.Token(SyntaxKind.OpenBraceToken), default, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new MatchArm instance.</summary>
        public static MatchArm MatchArm(SyntaxToken barToken, ExprSyntax patternExpression, SyntaxToken equalsGreaterThanToken, ExprSyntax resultExpression)
        {
            switch (barToken.Kind())
            {
                case SyntaxKind.BarToken:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(barToken));
            }
            if (patternExpression == null) throw new ArgumentNullException(nameof(patternExpression));
            switch (equalsGreaterThanToken.Kind())
            {
                case SyntaxKind.EqualsGreaterThanToken:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(equalsGreaterThanToken));
            }
            if (resultExpression == null) throw new ArgumentNullException(nameof(resultExpression));
            return (MatchArm)Syntax.InternalSyntax.SyntaxFactory.MatchArm((Syntax.InternalSyntax.SyntaxToken?)barToken.Node, (Syntax.InternalSyntax.ExprSyntax)patternExpression.Green, (Syntax.InternalSyntax.SyntaxToken?)equalsGreaterThanToken.Node, (Syntax.InternalSyntax.ExprSyntax)resultExpression.Green).CreateRed();
        }

        /// <summary>Creates a new MatchArm instance.</summary>
        public static MatchArm MatchArm(ExprSyntax patternExpression, ExprSyntax resultExpression)
            => SyntaxFactory.MatchArm(default, patternExpression, default, resultExpression);

        /// <summary>Creates a new InterpolatedStringTextSyntax instance.</summary>
        public static InterpolatedStringTextSyntax InterpolatedStringText(SyntaxToken textToken)
        {
            if (textToken.Kind() != SyntaxKind.InterpolatedStringTextToken) throw new ArgumentException(nameof(textToken));
            return (InterpolatedStringTextSyntax)Syntax.InternalSyntax.SyntaxFactory.InterpolatedStringText((Syntax.InternalSyntax.SyntaxToken)textToken.Node!).CreateRed();
        }

        /// <summary>Creates a new InterpolatedStringTextSyntax instance.</summary>
        public static InterpolatedStringTextSyntax InterpolatedStringText()
            => SyntaxFactory.InterpolatedStringText(SyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        /// <summary>Creates a new InterpolationSyntax instance.</summary>
        public static InterpolationSyntax Interpolation(SyntaxToken openBraceToken, ExprSyntax expression, InterpolationAlignmentClauseSyntax? alignmentClause, InterpolationFormatClauseSyntax? formatClause, SyntaxToken closeBraceToken)
        {
            if (openBraceToken.Kind() != SyntaxKind.OpenBraceToken) throw new ArgumentException(nameof(openBraceToken));
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (closeBraceToken.Kind() != SyntaxKind.CloseBraceToken) throw new ArgumentException(nameof(closeBraceToken));
            return (InterpolationSyntax)Syntax.InternalSyntax.SyntaxFactory.Interpolation((Syntax.InternalSyntax.SyntaxToken)openBraceToken.Node!, (Syntax.InternalSyntax.ExprSyntax)expression.Green, alignmentClause == null ? null : (Syntax.InternalSyntax.InterpolationAlignmentClauseSyntax)alignmentClause.Green, formatClause == null ? null : (Syntax.InternalSyntax.InterpolationFormatClauseSyntax)formatClause.Green, (Syntax.InternalSyntax.SyntaxToken)closeBraceToken.Node!).CreateRed();
        }

        /// <summary>Creates a new InterpolationSyntax instance.</summary>
        public static InterpolationSyntax Interpolation(ExprSyntax expression, InterpolationAlignmentClauseSyntax? alignmentClause, InterpolationFormatClauseSyntax? formatClause)
            => SyntaxFactory.Interpolation(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), expression, alignmentClause, formatClause, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new InterpolationSyntax instance.</summary>
        public static InterpolationSyntax Interpolation(ExprSyntax expression)
            => SyntaxFactory.Interpolation(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), expression, default, default, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new InterpolationAlignmentClauseSyntax instance.</summary>
        public static InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(SyntaxToken commaToken, ExprSyntax value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            return (InterpolationAlignmentClauseSyntax)Syntax.InternalSyntax.SyntaxFactory.InterpolationAlignmentClause((Syntax.InternalSyntax.SyntaxToken)commaToken.Node!, (Syntax.InternalSyntax.ExprSyntax)value.Green).CreateRed();
        }

        /// <summary>Creates a new InterpolationFormatClauseSyntax instance.</summary>
        public static InterpolationFormatClauseSyntax InterpolationFormatClause(SyntaxToken colonToken, SyntaxToken formatStringToken)
        {
            if (formatStringToken.Kind() != SyntaxKind.InterpolatedStringTextToken) throw new ArgumentException(nameof(formatStringToken));
            return (InterpolationFormatClauseSyntax)Syntax.InternalSyntax.SyntaxFactory.InterpolationFormatClause((Syntax.InternalSyntax.SyntaxToken)colonToken.Node!, (Syntax.InternalSyntax.SyntaxToken)formatStringToken.Node!).CreateRed();
        }

        /// <summary>Creates a new InterpolationFormatClauseSyntax instance.</summary>
        public static InterpolationFormatClauseSyntax InterpolationFormatClause(SyntaxToken colonToken)
            => SyntaxFactory.InterpolationFormatClause(colonToken, SyntaxFactory.Token(SyntaxKind.InterpolatedStringTextToken));

        /// <summary>Creates a new ArgumentListSyntax instance.</summary>
        public static ArgumentListSyntax ArgumentList(SyntaxToken openParenToken, SeparatedSyntaxList<ArgumentSyntax> arguments, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (ArgumentListSyntax)Syntax.InternalSyntax.SyntaxFactory.ArgumentList((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, arguments.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ArgumentSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ArgumentListSyntax instance.</summary>
        public static ArgumentListSyntax ArgumentList(SeparatedSyntaxList<ArgumentSyntax> arguments = default)
            => SyntaxFactory.ArgumentList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), arguments, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new BracketedArgumentListSyntax instance.</summary>
        public static BracketedArgumentListSyntax BracketedArgumentList(SyntaxToken openBracketToken, SeparatedSyntaxList<ArgumentSyntax> arguments, SyntaxToken closeBracketToken)
        {
            if (openBracketToken.Kind() != SyntaxKind.OpenBracketToken) throw new ArgumentException(nameof(openBracketToken));
            if (closeBracketToken.Kind() != SyntaxKind.CloseBracketToken) throw new ArgumentException(nameof(closeBracketToken));
            return (BracketedArgumentListSyntax)Syntax.InternalSyntax.SyntaxFactory.BracketedArgumentList((Syntax.InternalSyntax.SyntaxToken)openBracketToken.Node!, arguments.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ArgumentSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBracketToken.Node!).CreateRed();
        }

        /// <summary>Creates a new BracketedArgumentListSyntax instance.</summary>
        public static BracketedArgumentListSyntax BracketedArgumentList(SeparatedSyntaxList<ArgumentSyntax> arguments = default)
            => SyntaxFactory.BracketedArgumentList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), arguments, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        /// <summary>Creates a new ArgumentSyntax instance.</summary>
        public static ArgumentSyntax Argument(NameColonSyntax? nameColon, SyntaxToken refKindKeyword, ExprSyntax expression)
        {
            switch (refKindKeyword.Kind())
            {
                case SyntaxKind.RefKeyword:
                case SyntaxKind.OutKeyword:
                case SyntaxKind.InKeyword:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(refKindKeyword));
            }
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            return (ArgumentSyntax)Syntax.InternalSyntax.SyntaxFactory.Argument(nameColon == null ? null : (Syntax.InternalSyntax.NameColonSyntax)nameColon.Green, (Syntax.InternalSyntax.SyntaxToken?)refKindKeyword.Node, (Syntax.InternalSyntax.ExprSyntax)expression.Green).CreateRed();
        }

        /// <summary>Creates a new ArgumentSyntax instance.</summary>
        public static ArgumentSyntax Argument(ExprSyntax expression)
            => SyntaxFactory.Argument(default, default, expression);

        /// <summary>Creates a new ExprColonSyntax instance.</summary>
        public static ExprColonSyntax ExprColon(ExprSyntax expression, SyntaxToken colonToken)
        {
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (colonToken.Kind() != SyntaxKind.ColonToken) throw new ArgumentException(nameof(colonToken));
            return (ExprColonSyntax)Syntax.InternalSyntax.SyntaxFactory.ExprColon((Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)colonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new NameColonSyntax instance.</summary>
        public static NameColonSyntax NameColon(IdentifierEx name, SyntaxToken colonToken)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (colonToken.Kind() != SyntaxKind.ColonToken) throw new ArgumentException(nameof(colonToken));
            return (NameColonSyntax)Syntax.InternalSyntax.SyntaxFactory.NameColon((Syntax.InternalSyntax.IdentifierEx)name.Green, (Syntax.InternalSyntax.SyntaxToken)colonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new QualifiedNameEx instance.</summary>
        public static QualifiedNameEx QualifiedNameEx(NameEx left, SyntaxToken dotToken, SimpleNameEx right)
        {
            if (left == null) throw new ArgumentNullException(nameof(left));
            if (dotToken.Kind() != SyntaxKind.DotToken) throw new ArgumentException(nameof(dotToken));
            if (right == null) throw new ArgumentNullException(nameof(right));
            return (QualifiedNameEx)Syntax.InternalSyntax.SyntaxFactory.QualifiedNameEx((Syntax.InternalSyntax.NameEx)left.Green, (Syntax.InternalSyntax.SyntaxToken)dotToken.Node!, (Syntax.InternalSyntax.SimpleNameEx)right.Green).CreateRed();
        }

        /// <summary>Creates a new QualifiedNameEx instance.</summary>
        public static QualifiedNameEx QualifiedNameEx(NameEx left, SimpleNameEx right)
            => SyntaxFactory.QualifiedNameEx(left, SyntaxFactory.Token(SyntaxKind.DotToken), right);

        /// <summary>Creates a new IdentifierEx instance.</summary>
        public static IdentifierEx IdentifierEx(SyntaxToken identifier)
        {
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            return (IdentifierEx)Syntax.InternalSyntax.SyntaxFactory.IdentifierEx((Syntax.InternalSyntax.SyntaxToken)identifier.Node!).CreateRed();
        }

        /// <summary>Creates a new GenericEx instance.</summary>
        public static GenericEx GenericEx(SyntaxToken identifier, TypeArgumentListSyntax typeArgumentList)
        {
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            if (typeArgumentList == null) throw new ArgumentNullException(nameof(typeArgumentList));
            return (GenericEx)Syntax.InternalSyntax.SyntaxFactory.GenericEx((Syntax.InternalSyntax.SyntaxToken)identifier.Node!, (Syntax.InternalSyntax.TypeArgumentListSyntax)typeArgumentList.Green).CreateRed();
        }

        /// <summary>Creates a new GenericEx instance.</summary>
        public static GenericEx GenericEx(SyntaxToken identifier)
            => SyntaxFactory.GenericEx(identifier, SyntaxFactory.TypeArgumentList());

        /// <summary>Creates a new GenericEx instance.</summary>
        public static GenericEx GenericEx(string identifier)
            => SyntaxFactory.GenericEx(SyntaxFactory.Identifier(identifier), SyntaxFactory.TypeArgumentList());

        /// <summary>Creates a new PredefinedTypeEx instance.</summary>
        public static PredefinedTypeEx PredefinedTypeEx(SyntaxToken keyword)
        {
            switch (keyword.Kind())
            {
                case SyntaxKind.BoolKeyword:
                case SyntaxKind.ByteKeyword:
                case SyntaxKind.SByteKeyword:
                case SyntaxKind.IntKeyword:
                case SyntaxKind.UIntKeyword:
                case SyntaxKind.ShortKeyword:
                case SyntaxKind.UShortKeyword:
                case SyntaxKind.LongKeyword:
                case SyntaxKind.ULongKeyword:
                case SyntaxKind.FloatKeyword:
                case SyntaxKind.DoubleKeyword:
                case SyntaxKind.DecimalKeyword:
                case SyntaxKind.StringKeyword:
                case SyntaxKind.CharKeyword:
                case SyntaxKind.ObjectKeyword:
                case SyntaxKind.VoidKeyword:
                case SyntaxKind.DatetimeKeyword: break;
                default: throw new ArgumentException(nameof(keyword));
            }
            return (PredefinedTypeEx)Syntax.InternalSyntax.SyntaxFactory.PredefinedTypeEx((Syntax.InternalSyntax.SyntaxToken)keyword.Node!).CreateRed();
        }

        /// <summary>Creates a new ArrayTypeEx instance.</summary>
        public static ArrayTypeEx ArrayTypeEx(TypeEx elementType, SyntaxList<ArrayRankSpecifierSyntax> rankSpecifiers)
        {
            if (elementType == null) throw new ArgumentNullException(nameof(elementType));
            return (ArrayTypeEx)Syntax.InternalSyntax.SyntaxFactory.ArrayTypeEx((Syntax.InternalSyntax.TypeEx)elementType.Green, rankSpecifiers.Node.ToGreenList<Syntax.InternalSyntax.ArrayRankSpecifierSyntax>()).CreateRed();
        }

        /// <summary>Creates a new ArrayTypeEx instance.</summary>
        public static ArrayTypeEx ArrayTypeEx(TypeEx elementType)
            => SyntaxFactory.ArrayTypeEx(elementType, default);

        /// <summary>Creates a new UnionTypeEx instance.</summary>
        public static UnionTypeEx UnionTypeEx(SyntaxToken openParenToken, SeparatedSyntaxList<TypeEx> types, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (UnionTypeEx)Syntax.InternalSyntax.SyntaxFactory.UnionTypeEx((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, types.Node.ToGreenSeparatedList<Syntax.InternalSyntax.TypeEx>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new UnionTypeEx instance.</summary>
        public static UnionTypeEx UnionTypeEx(SeparatedSyntaxList<TypeEx> types = default)
            => SyntaxFactory.UnionTypeEx(SyntaxFactory.Token(SyntaxKind.OpenParenToken), types, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new RefTypeEx instance.</summary>
        public static RefTypeEx RefTypeEx(SyntaxToken refKeyword, SyntaxToken readOnlyKeyword, TypeEx type)
        {
            if (refKeyword.Kind() != SyntaxKind.RefKeyword) throw new ArgumentException(nameof(refKeyword));
            switch (readOnlyKeyword.Kind())
            {
                case SyntaxKind.ReadOnlyKeyword:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(readOnlyKeyword));
            }
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (RefTypeEx)Syntax.InternalSyntax.SyntaxFactory.RefTypeEx((Syntax.InternalSyntax.SyntaxToken)refKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken?)readOnlyKeyword.Node, (Syntax.InternalSyntax.TypeEx)type.Green).CreateRed();
        }

        /// <summary>Creates a new RefTypeEx instance.</summary>
        public static RefTypeEx RefTypeEx(TypeEx type)
            => SyntaxFactory.RefTypeEx(SyntaxFactory.Token(SyntaxKind.RefKeyword), default, type);

        /// <summary>Creates a new TypeArgumentListSyntax instance.</summary>
        public static TypeArgumentListSyntax TypeArgumentList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeEx> arguments, SyntaxToken greaterThanToken)
        {
            if (lessThanToken.Kind() != SyntaxKind.LessThanToken) throw new ArgumentException(nameof(lessThanToken));
            if (greaterThanToken.Kind() != SyntaxKind.GreaterThanToken) throw new ArgumentException(nameof(greaterThanToken));
            return (TypeArgumentListSyntax)Syntax.InternalSyntax.SyntaxFactory.TypeArgumentList((Syntax.InternalSyntax.SyntaxToken)lessThanToken.Node!, arguments.Node.ToGreenSeparatedList<Syntax.InternalSyntax.TypeEx>(), (Syntax.InternalSyntax.SyntaxToken)greaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new TypeArgumentListSyntax instance.</summary>
        public static TypeArgumentListSyntax TypeArgumentList(SeparatedSyntaxList<TypeEx> arguments = default)
            => SyntaxFactory.TypeArgumentList(SyntaxFactory.Token(SyntaxKind.LessThanToken), arguments, SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        /// <summary>Creates a new ArrayRankSpecifierSyntax instance.</summary>
        public static ArrayRankSpecifierSyntax ArrayRankSpecifier(SyntaxToken openBracketToken, SeparatedSyntaxList<ExprSyntax> sizes, SyntaxToken closeBracketToken)
        {
            if (openBracketToken.Kind() != SyntaxKind.OpenBracketToken) throw new ArgumentException(nameof(openBracketToken));
            if (closeBracketToken.Kind() != SyntaxKind.CloseBracketToken) throw new ArgumentException(nameof(closeBracketToken));
            return (ArrayRankSpecifierSyntax)Syntax.InternalSyntax.SyntaxFactory.ArrayRankSpecifier((Syntax.InternalSyntax.SyntaxToken)openBracketToken.Node!, sizes.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ExprSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBracketToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ArrayRankSpecifierSyntax instance.</summary>
        public static ArrayRankSpecifierSyntax ArrayRankSpecifier(SeparatedSyntaxList<ExprSyntax> sizes = default)
            => SyntaxFactory.ArrayRankSpecifier(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), sizes, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        /// <summary>Creates a new OmittedArraySizeEx instance.</summary>
        public static OmittedArraySizeEx OmittedArraySizeEx(SyntaxToken omittedArraySizeExpressionToken)
        {
            if (omittedArraySizeExpressionToken.Kind() != SyntaxKind.OmittedArraySizeExpressionToken) throw new ArgumentException(nameof(omittedArraySizeExpressionToken));
            return (OmittedArraySizeEx)Syntax.InternalSyntax.SyntaxFactory.OmittedArraySizeEx((Syntax.InternalSyntax.SyntaxToken)omittedArraySizeExpressionToken.Node!).CreateRed();
        }

        /// <summary>Creates a new OmittedArraySizeEx instance.</summary>
        public static OmittedArraySizeEx OmittedArraySizeEx()
            => SyntaxFactory.OmittedArraySizeEx(SyntaxFactory.Token(SyntaxKind.OmittedArraySizeExpressionToken));

        /// <summary>Creates a new ParameterListSyntax instance.</summary>
        public static ParameterListSyntax ParameterList(SyntaxToken openParenToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (ParameterListSyntax)Syntax.InternalSyntax.SyntaxFactory.ParameterList((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, parameters.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ParameterSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ParameterListSyntax instance.</summary>
        public static ParameterListSyntax ParameterList(SeparatedSyntaxList<ParameterSyntax> parameters = default)
            => SyntaxFactory.ParameterList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), parameters, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new BracketedParameterListSyntax instance.</summary>
        public static BracketedParameterListSyntax BracketedParameterList(SyntaxToken openBracketToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeBracketToken)
        {
            if (openBracketToken.Kind() != SyntaxKind.OpenBracketToken) throw new ArgumentException(nameof(openBracketToken));
            if (closeBracketToken.Kind() != SyntaxKind.CloseBracketToken) throw new ArgumentException(nameof(closeBracketToken));
            return (BracketedParameterListSyntax)Syntax.InternalSyntax.SyntaxFactory.BracketedParameterList((Syntax.InternalSyntax.SyntaxToken)openBracketToken.Node!, parameters.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ParameterSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBracketToken.Node!).CreateRed();
        }

        /// <summary>Creates a new BracketedParameterListSyntax instance.</summary>
        public static BracketedParameterListSyntax BracketedParameterList(SeparatedSyntaxList<ParameterSyntax> parameters = default)
            => SyntaxFactory.BracketedParameterList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), parameters, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        /// <summary>Creates a new ParameterSyntax instance.</summary>
        public static ParameterSyntax Parameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeEx? type, SyntaxToken identifier, EqualsValueClauseSyntax? @default)
        {
            switch (identifier.Kind())
            {
                case SyntaxKind.IdentifierToken:
                case SyntaxKind.ArgListKeyword: break;
                default: throw new ArgumentException(nameof(identifier));
            }
            return (ParameterSyntax)Syntax.InternalSyntax.SyntaxFactory.Parameter(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), modifiers.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), type == null ? null : (Syntax.InternalSyntax.TypeEx)type.Green, (Syntax.InternalSyntax.SyntaxToken)identifier.Node!, @default == null ? null : (Syntax.InternalSyntax.EqualsValueClauseSyntax)@default.Green).CreateRed();
        }

        /// <summary>Creates a new ParameterSyntax instance.</summary>
        public static ParameterSyntax Parameter(SyntaxToken identifier)
            => SyntaxFactory.Parameter(default, default(SyntaxTokenList), default, identifier, default);

        /// <summary>Creates a new FunctionPointerParameterSyntax instance.</summary>
        public static FunctionPointerParameterSyntax FunctionPointerParameter(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeEx type)
        {
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (FunctionPointerParameterSyntax)Syntax.InternalSyntax.SyntaxFactory.FunctionPointerParameter(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), modifiers.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.TypeEx)type.Green).CreateRed();
        }

        /// <summary>Creates a new FunctionPointerParameterSyntax instance.</summary>
        public static FunctionPointerParameterSyntax FunctionPointerParameter(TypeEx type)
            => SyntaxFactory.FunctionPointerParameter(default, default(SyntaxTokenList), type);

        /// <summary>Creates a new IncompleteMemberSyntax instance.</summary>
        public static IncompleteMemberSyntax IncompleteMember(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, TypeEx? type)
        {
            return (IncompleteMemberSyntax)Syntax.InternalSyntax.SyntaxFactory.IncompleteMember(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), modifiers.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), type == null ? null : (Syntax.InternalSyntax.TypeEx)type.Green).CreateRed();
        }

#pragma warning disable RS0027
        /// <summary>Creates a new IncompleteMemberSyntax instance.</summary>
        public static IncompleteMemberSyntax IncompleteMember(TypeEx? type = default)
            => SyntaxFactory.IncompleteMember(default, default(SyntaxTokenList), type);
#pragma warning restore RS0027

        /// <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        public static SkippedTokensTriviaSyntax SkippedTokensTrivia(SyntaxTokenList tokens)
        {
            return (SkippedTokensTriviaSyntax)Syntax.InternalSyntax.SyntaxFactory.SkippedTokensTrivia(tokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>()).CreateRed();
        }

        /// <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        public static SkippedTokensTriviaSyntax SkippedTokensTrivia()
            => SyntaxFactory.SkippedTokensTrivia(default(SyntaxTokenList));

        /// <summary>Creates a new EqualsValueClauseSyntax instance.</summary>
        public static EqualsValueClauseSyntax EqualsValueClause(SyntaxToken equalsToken, ExprSyntax value)
        {
            if (equalsToken.Kind() != SyntaxKind.EqualsToken) throw new ArgumentException(nameof(equalsToken));
            if (value == null) throw new ArgumentNullException(nameof(value));
            return (EqualsValueClauseSyntax)Syntax.InternalSyntax.SyntaxFactory.EqualsValueClause((Syntax.InternalSyntax.SyntaxToken)equalsToken.Node!, (Syntax.InternalSyntax.ExprSyntax)value.Green).CreateRed();
        }

        /// <summary>Creates a new EqualsValueClauseSyntax instance.</summary>
        public static EqualsValueClauseSyntax EqualsValueClause(ExprSyntax value)
            => SyntaxFactory.EqualsValueClause(SyntaxFactory.Token(SyntaxKind.EqualsToken), value);

        /// <summary>Creates a new VariableDecl instance.</summary>
        public static VariableDecl VariableDecl(TypeEx type, SeparatedSyntaxList<VariableInit> variables)
        {
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (VariableDecl)Syntax.InternalSyntax.SyntaxFactory.VariableDecl((Syntax.InternalSyntax.TypeEx)type.Green, variables.Node.ToGreenSeparatedList<Syntax.InternalSyntax.VariableInit>()).CreateRed();
        }

        /// <summary>Creates a new VariableDecl instance.</summary>
        public static VariableDecl VariableDecl(TypeEx type)
            => SyntaxFactory.VariableDecl(type, default);

        /// <summary>Creates a new VariableInit instance.</summary>
        public static VariableInit VariableInit(SyntaxToken identifier, BracketedArgumentListSyntax? argumentList, EqualsValueClauseSyntax? initializer)
        {
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            return (VariableInit)Syntax.InternalSyntax.SyntaxFactory.VariableInit((Syntax.InternalSyntax.SyntaxToken)identifier.Node!, argumentList == null ? null : (Syntax.InternalSyntax.BracketedArgumentListSyntax)argumentList.Green, initializer == null ? null : (Syntax.InternalSyntax.EqualsValueClauseSyntax)initializer.Green).CreateRed();
        }

        /// <summary>Creates a new VariableInit instance.</summary>
        public static VariableInit VariableInit(SyntaxToken identifier)
            => SyntaxFactory.VariableInit(identifier, default, default);

        /// <summary>Creates a new VariableInit instance.</summary>
        public static VariableInit VariableInit(string identifier)
            => SyntaxFactory.VariableInit(SyntaxFactory.Identifier(identifier), default, default);

        /// <summary>Creates a new BlockStmt instance.</summary>
        public static BlockStmt BlockStmt(SyntaxToken openBraceToken, SyntaxList<StmtSyntax> statements, SyntaxToken closeBraceToken)
        {
            if (openBraceToken.Kind() != SyntaxKind.OpenBraceToken) throw new ArgumentException(nameof(openBraceToken));
            if (closeBraceToken.Kind() != SyntaxKind.CloseBraceToken) throw new ArgumentException(nameof(closeBraceToken));
            return (BlockStmt)Syntax.InternalSyntax.SyntaxFactory.BlockStmt((Syntax.InternalSyntax.SyntaxToken)openBraceToken.Node!, statements.Node.ToGreenList<Syntax.InternalSyntax.StmtSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBraceToken.Node!).CreateRed();
        }

        /// <summary>Creates a new BlockStmt instance.</summary>
        public static BlockStmt BlockStmt(SyntaxList<StmtSyntax> statements = default)
            => SyntaxFactory.BlockStmt(SyntaxFactory.Token(SyntaxKind.OpenBraceToken), statements, SyntaxFactory.Token(SyntaxKind.CloseBraceToken));

        /// <summary>Creates a new ExpressionStmt instance.</summary>
        public static ExpressionStmt ExpressionStmt(ExprSyntax expression, SyntaxToken semicolonToken)
        {
            if (expression == null) throw new ArgumentNullException(nameof(expression));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (ExpressionStmt)Syntax.InternalSyntax.SyntaxFactory.ExpressionStmt((Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ExpressionStmt instance.</summary>
        public static ExpressionStmt ExpressionStmt(ExprSyntax expression)
            => SyntaxFactory.ExpressionStmt(expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new EmptyStmt instance.</summary>
        public static EmptyStmt EmptyStmt(SyntaxToken semicolonToken)
        {
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (EmptyStmt)Syntax.InternalSyntax.SyntaxFactory.EmptyStmt((Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new EmptyStmt instance.</summary>
        public static EmptyStmt EmptyStmt()
            => SyntaxFactory.EmptyStmt(SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new LabeledStmt instance.</summary>
        public static LabeledStmt LabeledStmt(SyntaxToken identifier, SyntaxToken colonToken, StmtSyntax statement)
        {
            if (identifier.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(identifier));
            if (colonToken.Kind() != SyntaxKind.ColonToken) throw new ArgumentException(nameof(colonToken));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            return (LabeledStmt)Syntax.InternalSyntax.SyntaxFactory.LabeledStmt((Syntax.InternalSyntax.SyntaxToken)identifier.Node!, (Syntax.InternalSyntax.SyntaxToken)colonToken.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green).CreateRed();
        }

        /// <summary>Creates a new LabeledStmt instance.</summary>
        public static LabeledStmt LabeledStmt(SyntaxToken identifier, StmtSyntax statement)
            => SyntaxFactory.LabeledStmt(identifier, SyntaxFactory.Token(SyntaxKind.ColonToken), statement);

        /// <summary>Creates a new LabeledStmt instance.</summary>
        public static LabeledStmt LabeledStmt(string identifier, StmtSyntax statement)
            => SyntaxFactory.LabeledStmt(SyntaxFactory.Identifier(identifier), SyntaxFactory.Token(SyntaxKind.ColonToken), statement);

        /// <summary>Creates a new GotoStmt instance.</summary>
        public static GotoStmt GotoStmt(SyntaxKind kind, SyntaxToken gotoKeyword, SyntaxToken caseOrDefaultKeyword, ExprSyntax? expression, SyntaxToken semicolonToken)
        {
            switch (kind)
            {
                case SyntaxKind.GotoStatement:
                case SyntaxKind.GotoCaseStatement:
                case SyntaxKind.GotoDefaultStatement: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (gotoKeyword.Kind() != SyntaxKind.GotoKeyword) throw new ArgumentException(nameof(gotoKeyword));
            switch (caseOrDefaultKeyword.Kind())
            {
                case SyntaxKind.CaseKeyword:
                case SyntaxKind.DefaultKeyword:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(caseOrDefaultKeyword));
            }
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (GotoStmt)Syntax.InternalSyntax.SyntaxFactory.GotoStmt(kind, (Syntax.InternalSyntax.SyntaxToken)gotoKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken?)caseOrDefaultKeyword.Node, expression == null ? null : (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new GotoStmt instance.</summary>
        public static GotoStmt GotoStmt(SyntaxKind kind, SyntaxToken caseOrDefaultKeyword, ExprSyntax? expression)
            => SyntaxFactory.GotoStmt(kind, SyntaxFactory.Token(SyntaxKind.GotoKeyword), caseOrDefaultKeyword, expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new GotoStmt instance.</summary>
        public static GotoStmt GotoStmt(SyntaxKind kind, ExprSyntax? expression = default)
            => SyntaxFactory.GotoStmt(kind, SyntaxFactory.Token(SyntaxKind.GotoKeyword), default, expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new BreakStmt instance.</summary>
        public static BreakStmt BreakStmt(SyntaxToken breakKeyword, SyntaxToken semicolonToken)
        {
            if (breakKeyword.Kind() != SyntaxKind.BreakKeyword) throw new ArgumentException(nameof(breakKeyword));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (BreakStmt)Syntax.InternalSyntax.SyntaxFactory.BreakStmt((Syntax.InternalSyntax.SyntaxToken)breakKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new BreakStmt instance.</summary>
        public static BreakStmt BreakStmt()
            => SyntaxFactory.BreakStmt(SyntaxFactory.Token(SyntaxKind.BreakKeyword), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new ContinueStmt instance.</summary>
        public static ContinueStmt ContinueStmt(SyntaxToken continueKeyword, SyntaxToken semicolonToken)
        {
            if (continueKeyword.Kind() != SyntaxKind.ContinueKeyword) throw new ArgumentException(nameof(continueKeyword));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (ContinueStmt)Syntax.InternalSyntax.SyntaxFactory.ContinueStmt((Syntax.InternalSyntax.SyntaxToken)continueKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ContinueStmt instance.</summary>
        public static ContinueStmt ContinueStmt()
            => SyntaxFactory.ContinueStmt(SyntaxFactory.Token(SyntaxKind.ContinueKeyword), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new ReturnStmt instance.</summary>
        public static ReturnStmt ReturnStmt(SyntaxToken returnKeyword, ExprSyntax? expression, SyntaxToken semicolonToken)
        {
            if (returnKeyword.Kind() != SyntaxKind.ReturnKeyword) throw new ArgumentException(nameof(returnKeyword));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (ReturnStmt)Syntax.InternalSyntax.SyntaxFactory.ReturnStmt((Syntax.InternalSyntax.SyntaxToken)returnKeyword.Node!, expression == null ? null : (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ReturnStmt instance.</summary>
        public static ReturnStmt ReturnStmt(ExprSyntax? expression = default)
            => SyntaxFactory.ReturnStmt(SyntaxFactory.Token(SyntaxKind.ReturnKeyword), expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new ThrowStmt instance.</summary>
        public static ThrowStmt ThrowStmt(SyntaxToken throwKeyword, ExprSyntax? expression, SyntaxToken semicolonToken)
        {
            if (throwKeyword.Kind() != SyntaxKind.ThrowKeyword) throw new ArgumentException(nameof(throwKeyword));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (ThrowStmt)Syntax.InternalSyntax.SyntaxFactory.ThrowStmt((Syntax.InternalSyntax.SyntaxToken)throwKeyword.Node!, expression == null ? null : (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new ThrowStmt instance.</summary>
        public static ThrowStmt ThrowStmt(ExprSyntax? expression = default)
            => SyntaxFactory.ThrowStmt(SyntaxFactory.Token(SyntaxKind.ThrowKeyword), expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new YieldStmt instance.</summary>
        public static YieldStmt YieldStmt(SyntaxKind kind, SyntaxToken yieldKeyword, SyntaxToken returnOrBreakKeyword, ExprSyntax? expression, SyntaxToken semicolonToken)
        {
            switch (kind)
            {
                case SyntaxKind.YieldReturnStatement:
                case SyntaxKind.YieldBreakStatement: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (yieldKeyword.Kind() != SyntaxKind.YieldKeyword) throw new ArgumentException(nameof(yieldKeyword));
            switch (returnOrBreakKeyword.Kind())
            {
                case SyntaxKind.ReturnKeyword:
                case SyntaxKind.BreakKeyword: break;
                default: throw new ArgumentException(nameof(returnOrBreakKeyword));
            }
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (YieldStmt)Syntax.InternalSyntax.SyntaxFactory.YieldStmt(kind, (Syntax.InternalSyntax.SyntaxToken)yieldKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)returnOrBreakKeyword.Node!, expression == null ? null : (Syntax.InternalSyntax.ExprSyntax)expression.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new YieldStmt instance.</summary>
        public static YieldStmt YieldStmt(SyntaxKind kind, ExprSyntax? expression = default)
            => SyntaxFactory.YieldStmt(kind, SyntaxFactory.Token(SyntaxKind.YieldKeyword), SyntaxFactory.Token(GetYieldStmtReturnOrBreakKeywordKind(kind)), expression, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        private static SyntaxKind GetYieldStmtReturnOrBreakKeywordKind(SyntaxKind kind)
            => kind switch
            {
                SyntaxKind.YieldReturnStatement => SyntaxKind.ReturnKeyword,
                SyntaxKind.YieldBreakStatement => SyntaxKind.BreakKeyword,
                _ => throw new ArgumentOutOfRangeException(),
            };

        /// <summary>Creates a new WhileStmt instance.</summary>
        public static WhileStmt WhileStmt(SyntaxToken whileKeyword, SyntaxToken openParenToken, ExprSyntax condition, SyntaxToken closeParenToken, StmtSyntax statement)
        {
            if (whileKeyword.Kind() != SyntaxKind.WhileKeyword) throw new ArgumentException(nameof(whileKeyword));
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (condition == null) throw new ArgumentNullException(nameof(condition));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            return (WhileStmt)Syntax.InternalSyntax.SyntaxFactory.WhileStmt((Syntax.InternalSyntax.SyntaxToken)whileKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, (Syntax.InternalSyntax.ExprSyntax)condition.Green, (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green).CreateRed();
        }

        /// <summary>Creates a new WhileStmt instance.</summary>
        public static WhileStmt WhileStmt(ExprSyntax condition, StmtSyntax statement)
            => SyntaxFactory.WhileStmt(SyntaxFactory.Token(SyntaxKind.WhileKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), condition, SyntaxFactory.Token(SyntaxKind.CloseParenToken), statement);

        /// <summary>Creates a new DoStmt instance.</summary>
        public static DoStmt DoStmt(SyntaxToken doKeyword, StmtSyntax statement, SyntaxToken whileKeyword, SyntaxToken openParenToken, ExprSyntax condition, SyntaxToken closeParenToken, SyntaxToken semicolonToken)
        {
            if (doKeyword.Kind() != SyntaxKind.DoKeyword) throw new ArgumentException(nameof(doKeyword));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            if (whileKeyword.Kind() != SyntaxKind.WhileKeyword) throw new ArgumentException(nameof(whileKeyword));
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (condition == null) throw new ArgumentNullException(nameof(condition));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (DoStmt)Syntax.InternalSyntax.SyntaxFactory.DoStmt((Syntax.InternalSyntax.SyntaxToken)doKeyword.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green, (Syntax.InternalSyntax.SyntaxToken)whileKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, (Syntax.InternalSyntax.ExprSyntax)condition.Green, (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new DoStmt instance.</summary>
        public static DoStmt DoStmt(StmtSyntax statement, ExprSyntax condition)
            => SyntaxFactory.DoStmt(SyntaxFactory.Token(SyntaxKind.DoKeyword), statement, SyntaxFactory.Token(SyntaxKind.WhileKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), condition, SyntaxFactory.Token(SyntaxKind.CloseParenToken), SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new ForStmt instance.</summary>
        public static ForStmt ForStmt(SyntaxToken forKeyword, SyntaxToken openParenToken, VariableDecl? declaration, SeparatedSyntaxList<ExprSyntax> initializers, SyntaxToken firstSemicolonToken, ExprSyntax? condition, SyntaxToken secondSemicolonToken, SeparatedSyntaxList<ExprSyntax> incrementors, SyntaxToken closeParenToken, StmtSyntax statement)
        {
            if (forKeyword.Kind() != SyntaxKind.ForKeyword) throw new ArgumentException(nameof(forKeyword));
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (firstSemicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(firstSemicolonToken));
            if (secondSemicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(secondSemicolonToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            return (ForStmt)Syntax.InternalSyntax.SyntaxFactory.ForStmt((Syntax.InternalSyntax.SyntaxToken)forKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, declaration == null ? null : (Syntax.InternalSyntax.VariableDecl)declaration.Green, initializers.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ExprSyntax>(), (Syntax.InternalSyntax.SyntaxToken)firstSemicolonToken.Node!, condition == null ? null : (Syntax.InternalSyntax.ExprSyntax)condition.Green, (Syntax.InternalSyntax.SyntaxToken)secondSemicolonToken.Node!, incrementors.Node.ToGreenSeparatedList<Syntax.InternalSyntax.ExprSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green).CreateRed();
        }

        /// <summary>Creates a new ForStmt instance.</summary>
        public static ForStmt ForStmt(VariableDecl? declaration, SeparatedSyntaxList<ExprSyntax> initializers, ExprSyntax? condition, SeparatedSyntaxList<ExprSyntax> incrementors, StmtSyntax statement)
            => SyntaxFactory.ForStmt(SyntaxFactory.Token(SyntaxKind.ForKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), declaration, initializers, SyntaxFactory.Token(SyntaxKind.SemicolonToken), condition, SyntaxFactory.Token(SyntaxKind.SemicolonToken), incrementors, SyntaxFactory.Token(SyntaxKind.CloseParenToken), statement);

        /// <summary>Creates a new ForStmt instance.</summary>
        public static ForStmt ForStmt(StmtSyntax statement)
            => SyntaxFactory.ForStmt(SyntaxFactory.Token(SyntaxKind.ForKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), default, default, SyntaxFactory.Token(SyntaxKind.SemicolonToken), default, SyntaxFactory.Token(SyntaxKind.SemicolonToken), default, SyntaxFactory.Token(SyntaxKind.CloseParenToken), statement);

        /// <summary>Creates a new LocalDeclStmt instance.</summary>
        public static LocalDeclStmt LocalDeclStmt(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDecl declaration, SyntaxToken semicolonToken)
        {
            if (declaration == null) throw new ArgumentNullException(nameof(declaration));
            if (semicolonToken.Kind() != SyntaxKind.SemicolonToken) throw new ArgumentException(nameof(semicolonToken));
            return (LocalDeclStmt)Syntax.InternalSyntax.SyntaxFactory.LocalDeclStmt(attributeLists.Node.ToGreenList<Syntax.InternalSyntax.AttributeListSyntax>(), modifiers.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.VariableDecl)declaration.Green, (Syntax.InternalSyntax.SyntaxToken)semicolonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new LocalDeclStmt instance.</summary>
        public static LocalDeclStmt LocalDeclStmt(SyntaxList<AttributeListSyntax> attributeLists, SyntaxTokenList modifiers, VariableDecl declaration)
            => SyntaxFactory.LocalDeclStmt(attributeLists, modifiers, declaration, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new LocalDeclStmt instance.</summary>
        public static LocalDeclStmt LocalDeclStmt(VariableDecl declaration)
            => SyntaxFactory.LocalDeclStmt(default, default(SyntaxTokenList), declaration, SyntaxFactory.Token(SyntaxKind.SemicolonToken));

        /// <summary>Creates a new IfStmt instance.</summary>
        public static IfStmt IfStmt(SyntaxToken ifKeyword, SyntaxToken openParenToken, ExprSyntax condition, SyntaxToken closeParenToken, StmtSyntax statement, ElseClauseSyntax? @else)
        {
            if (ifKeyword.Kind() != SyntaxKind.IfKeyword) throw new ArgumentException(nameof(ifKeyword));
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (condition == null) throw new ArgumentNullException(nameof(condition));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            return (IfStmt)Syntax.InternalSyntax.SyntaxFactory.IfStmt((Syntax.InternalSyntax.SyntaxToken)ifKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, (Syntax.InternalSyntax.ExprSyntax)condition.Green, (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green, @else == null ? null : (Syntax.InternalSyntax.ElseClauseSyntax)@else.Green).CreateRed();
        }

        /// <summary>Creates a new IfStmt instance.</summary>
        public static IfStmt IfStmt(ExprSyntax condition, StmtSyntax statement, ElseClauseSyntax? @else)
            => SyntaxFactory.IfStmt(SyntaxFactory.Token(SyntaxKind.IfKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), condition, SyntaxFactory.Token(SyntaxKind.CloseParenToken), statement, @else);

        /// <summary>Creates a new IfStmt instance.</summary>
        public static IfStmt IfStmt(ExprSyntax condition, StmtSyntax statement)
            => SyntaxFactory.IfStmt(SyntaxFactory.Token(SyntaxKind.IfKeyword), SyntaxFactory.Token(SyntaxKind.OpenParenToken), condition, SyntaxFactory.Token(SyntaxKind.CloseParenToken), statement, default);

        /// <summary>Creates a new ElseClauseSyntax instance.</summary>
        public static ElseClauseSyntax ElseClause(SyntaxToken elseKeyword, StmtSyntax statement)
        {
            if (elseKeyword.Kind() != SyntaxKind.ElseKeyword) throw new ArgumentException(nameof(elseKeyword));
            if (statement == null) throw new ArgumentNullException(nameof(statement));
            return (ElseClauseSyntax)Syntax.InternalSyntax.SyntaxFactory.ElseClause((Syntax.InternalSyntax.SyntaxToken)elseKeyword.Node!, (Syntax.InternalSyntax.StmtSyntax)statement.Green).CreateRed();
        }

        /// <summary>Creates a new ElseClauseSyntax instance.</summary>
        public static ElseClauseSyntax ElseClause(StmtSyntax statement)
            => SyntaxFactory.ElseClause(SyntaxFactory.Token(SyntaxKind.ElseKeyword), statement);

        /// <summary>Creates a new DocumentationCommentTriviaSyntax instance.</summary>
        public static DocumentationCommentTriviaSyntax DocumentationCommentTrivia(SyntaxKind kind, SyntaxList<XmlNodeSyntax> content, SyntaxToken endOfComment)
        {
            switch (kind)
            {
                case SyntaxKind.SingleLineDocumentationCommentTrivia:
                case SyntaxKind.MultiLineDocumentationCommentTrivia: break;
                default: throw new ArgumentException(nameof(kind));
            }
            if (endOfComment.Kind() != SyntaxKind.EndOfDocumentationCommentToken) throw new ArgumentException(nameof(endOfComment));
            return (DocumentationCommentTriviaSyntax)Syntax.InternalSyntax.SyntaxFactory.DocumentationCommentTrivia(kind, content.Node.ToGreenList<Syntax.InternalSyntax.XmlNodeSyntax>(), (Syntax.InternalSyntax.SyntaxToken)endOfComment.Node!).CreateRed();
        }

        /// <summary>Creates a new DocumentationCommentTriviaSyntax instance.</summary>
        public static DocumentationCommentTriviaSyntax DocumentationCommentTrivia(SyntaxKind kind, SyntaxList<XmlNodeSyntax> content = default)
            => SyntaxFactory.DocumentationCommentTrivia(kind, content, SyntaxFactory.Token(SyntaxKind.EndOfDocumentationCommentToken));

        /// <summary>Creates a new TypeCrefSyntax instance.</summary>
        public static TypeCrefSyntax TypeCref(TypeEx type)
        {
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (TypeCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.TypeCref((Syntax.InternalSyntax.TypeEx)type.Green).CreateRed();
        }

        /// <summary>Creates a new QualifiedCrefSyntax instance.</summary>
        public static QualifiedCrefSyntax QualifiedCref(TypeEx container, SyntaxToken dotToken, MemberCrefSyntax member)
        {
            if (container == null) throw new ArgumentNullException(nameof(container));
            if (dotToken.Kind() != SyntaxKind.DotToken) throw new ArgumentException(nameof(dotToken));
            if (member == null) throw new ArgumentNullException(nameof(member));
            return (QualifiedCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.QualifiedCref((Syntax.InternalSyntax.TypeEx)container.Green, (Syntax.InternalSyntax.SyntaxToken)dotToken.Node!, (Syntax.InternalSyntax.MemberCrefSyntax)member.Green).CreateRed();
        }

        /// <summary>Creates a new QualifiedCrefSyntax instance.</summary>
        public static QualifiedCrefSyntax QualifiedCref(TypeEx container, MemberCrefSyntax member)
            => SyntaxFactory.QualifiedCref(container, SyntaxFactory.Token(SyntaxKind.DotToken), member);

        /// <summary>Creates a new NameMemberCrefSyntax instance.</summary>
        public static NameMemberCrefSyntax NameMemberCref(TypeEx name, CrefParameterListSyntax? parameters)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            return (NameMemberCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.NameMemberCref((Syntax.InternalSyntax.TypeEx)name.Green, parameters == null ? null : (Syntax.InternalSyntax.CrefParameterListSyntax)parameters.Green).CreateRed();
        }

        /// <summary>Creates a new NameMemberCrefSyntax instance.</summary>
        public static NameMemberCrefSyntax NameMemberCref(TypeEx name)
            => SyntaxFactory.NameMemberCref(name, default);

        /// <summary>Creates a new IndexerMemberCrefSyntax instance.</summary>
        public static IndexerMemberCrefSyntax IndexerMemberCref(SyntaxToken thisKeyword, CrefBracketedParameterListSyntax? parameters)
        {
            if (thisKeyword.Kind() != SyntaxKind.ThisKeyword) throw new ArgumentException(nameof(thisKeyword));
            return (IndexerMemberCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.IndexerMemberCref((Syntax.InternalSyntax.SyntaxToken)thisKeyword.Node!, parameters == null ? null : (Syntax.InternalSyntax.CrefBracketedParameterListSyntax)parameters.Green).CreateRed();
        }

        /// <summary>Creates a new IndexerMemberCrefSyntax instance.</summary>
        public static IndexerMemberCrefSyntax IndexerMemberCref(CrefBracketedParameterListSyntax? parameters = default)
            => SyntaxFactory.IndexerMemberCref(SyntaxFactory.Token(SyntaxKind.ThisKeyword), parameters);

        /// <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorKeyword, SyntaxToken operatorToken, CrefParameterListSyntax? parameters)
        {
            if (operatorKeyword.Kind() != SyntaxKind.OperatorKeyword) throw new ArgumentException(nameof(operatorKeyword));
            switch (operatorToken.Kind())
            {
                case SyntaxKind.PlusToken:
                case SyntaxKind.MinusToken:
                case SyntaxKind.ExclamationToken:
                case SyntaxKind.TildeToken:
                case SyntaxKind.PlusPlusToken:
                case SyntaxKind.MinusMinusToken:
                case SyntaxKind.AsteriskToken:
                case SyntaxKind.SlashToken:
                case SyntaxKind.PercentToken:
                case SyntaxKind.LessThanLessThanToken:
                case SyntaxKind.GreaterThanGreaterThanToken:
                case SyntaxKind.BarToken:
                case SyntaxKind.AmpersandToken:
                case SyntaxKind.CaretToken:
                case SyntaxKind.EqualsEqualsToken:
                case SyntaxKind.ExclamationEqualsToken:
                case SyntaxKind.LessThanToken:
                case SyntaxKind.LessThanEqualsToken:
                case SyntaxKind.GreaterThanToken:
                case SyntaxKind.GreaterThanEqualsToken:
                case SyntaxKind.FalseKeyword:
                case SyntaxKind.TrueKeyword: break;
                default: throw new ArgumentException(nameof(operatorToken));
            }
            return (OperatorMemberCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.OperatorMemberCref((Syntax.InternalSyntax.SyntaxToken)operatorKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)operatorToken.Node!, parameters == null ? null : (Syntax.InternalSyntax.CrefParameterListSyntax)parameters.Green).CreateRed();
        }

        /// <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorToken, CrefParameterListSyntax? parameters)
            => SyntaxFactory.OperatorMemberCref(SyntaxFactory.Token(SyntaxKind.OperatorKeyword), operatorToken, parameters);

        /// <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        public static OperatorMemberCrefSyntax OperatorMemberCref(SyntaxToken operatorToken)
            => SyntaxFactory.OperatorMemberCref(SyntaxFactory.Token(SyntaxKind.OperatorKeyword), operatorToken, default);

        /// <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, SyntaxToken operatorKeyword, TypeEx type, CrefParameterListSyntax? parameters)
        {
            switch (implicitOrExplicitKeyword.Kind())
            {
                case SyntaxKind.ImplicitKeyword:
                case SyntaxKind.ExplicitKeyword: break;
                default: throw new ArgumentException(nameof(implicitOrExplicitKeyword));
            }
            if (operatorKeyword.Kind() != SyntaxKind.OperatorKeyword) throw new ArgumentException(nameof(operatorKeyword));
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (ConversionOperatorMemberCrefSyntax)Syntax.InternalSyntax.SyntaxFactory.ConversionOperatorMemberCref((Syntax.InternalSyntax.SyntaxToken)implicitOrExplicitKeyword.Node!, (Syntax.InternalSyntax.SyntaxToken)operatorKeyword.Node!, (Syntax.InternalSyntax.TypeEx)type.Green, parameters == null ? null : (Syntax.InternalSyntax.CrefParameterListSyntax)parameters.Green).CreateRed();
        }

        /// <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, TypeEx type, CrefParameterListSyntax? parameters)
            => SyntaxFactory.ConversionOperatorMemberCref(implicitOrExplicitKeyword, SyntaxFactory.Token(SyntaxKind.OperatorKeyword), type, parameters);

        /// <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        public static ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(SyntaxToken implicitOrExplicitKeyword, TypeEx type)
            => SyntaxFactory.ConversionOperatorMemberCref(implicitOrExplicitKeyword, SyntaxFactory.Token(SyntaxKind.OperatorKeyword), type, default);

        /// <summary>Creates a new CrefParameterListSyntax instance.</summary>
        public static CrefParameterListSyntax CrefParameterList(SyntaxToken openParenToken, SeparatedSyntaxList<CrefParameterSyntax> parameters, SyntaxToken closeParenToken)
        {
            if (openParenToken.Kind() != SyntaxKind.OpenParenToken) throw new ArgumentException(nameof(openParenToken));
            if (closeParenToken.Kind() != SyntaxKind.CloseParenToken) throw new ArgumentException(nameof(closeParenToken));
            return (CrefParameterListSyntax)Syntax.InternalSyntax.SyntaxFactory.CrefParameterList((Syntax.InternalSyntax.SyntaxToken)openParenToken.Node!, parameters.Node.ToGreenSeparatedList<Syntax.InternalSyntax.CrefParameterSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeParenToken.Node!).CreateRed();
        }

        /// <summary>Creates a new CrefParameterListSyntax instance.</summary>
        public static CrefParameterListSyntax CrefParameterList(SeparatedSyntaxList<CrefParameterSyntax> parameters = default)
            => SyntaxFactory.CrefParameterList(SyntaxFactory.Token(SyntaxKind.OpenParenToken), parameters, SyntaxFactory.Token(SyntaxKind.CloseParenToken));

        /// <summary>Creates a new CrefBracketedParameterListSyntax instance.</summary>
        public static CrefBracketedParameterListSyntax CrefBracketedParameterList(SyntaxToken openBracketToken, SeparatedSyntaxList<CrefParameterSyntax> parameters, SyntaxToken closeBracketToken)
        {
            if (openBracketToken.Kind() != SyntaxKind.OpenBracketToken) throw new ArgumentException(nameof(openBracketToken));
            if (closeBracketToken.Kind() != SyntaxKind.CloseBracketToken) throw new ArgumentException(nameof(closeBracketToken));
            return (CrefBracketedParameterListSyntax)Syntax.InternalSyntax.SyntaxFactory.CrefBracketedParameterList((Syntax.InternalSyntax.SyntaxToken)openBracketToken.Node!, parameters.Node.ToGreenSeparatedList<Syntax.InternalSyntax.CrefParameterSyntax>(), (Syntax.InternalSyntax.SyntaxToken)closeBracketToken.Node!).CreateRed();
        }

        /// <summary>Creates a new CrefBracketedParameterListSyntax instance.</summary>
        public static CrefBracketedParameterListSyntax CrefBracketedParameterList(SeparatedSyntaxList<CrefParameterSyntax> parameters = default)
            => SyntaxFactory.CrefBracketedParameterList(SyntaxFactory.Token(SyntaxKind.OpenBracketToken), parameters, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));

        /// <summary>Creates a new CrefParameterSyntax instance.</summary>
        public static CrefParameterSyntax CrefParameter(SyntaxToken refKindKeyword, TypeEx type)
        {
            switch (refKindKeyword.Kind())
            {
                case SyntaxKind.RefKeyword:
                case SyntaxKind.OutKeyword:
                case SyntaxKind.InKeyword:
                case SyntaxKind.None: break;
                default: throw new ArgumentException(nameof(refKindKeyword));
            }
            if (type == null) throw new ArgumentNullException(nameof(type));
            return (CrefParameterSyntax)Syntax.InternalSyntax.SyntaxFactory.CrefParameter((Syntax.InternalSyntax.SyntaxToken?)refKindKeyword.Node, (Syntax.InternalSyntax.TypeEx)type.Green).CreateRed();
        }

        /// <summary>Creates a new CrefParameterSyntax instance.</summary>
        public static CrefParameterSyntax CrefParameter(TypeEx type)
            => SyntaxFactory.CrefParameter(default, type);

        /// <summary>Creates a new XmlElementSyntax instance.</summary>
        public static XmlElementSyntax XmlElement(XmlElementStartTagSyntax startTag, SyntaxList<XmlNodeSyntax> content, XmlElementEndTagSyntax endTag)
        {
            if (startTag == null) throw new ArgumentNullException(nameof(startTag));
            if (endTag == null) throw new ArgumentNullException(nameof(endTag));
            return (XmlElementSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlElement((Syntax.InternalSyntax.XmlElementStartTagSyntax)startTag.Green, content.Node.ToGreenList<Syntax.InternalSyntax.XmlNodeSyntax>(), (Syntax.InternalSyntax.XmlElementEndTagSyntax)endTag.Green).CreateRed();
        }

        /// <summary>Creates a new XmlElementSyntax instance.</summary>
        public static XmlElementSyntax XmlElement(XmlElementStartTagSyntax startTag, XmlElementEndTagSyntax endTag)
            => SyntaxFactory.XmlElement(startTag, default, endTag);

        /// <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        public static XmlElementStartTagSyntax XmlElementStartTag(SyntaxToken lessThanToken, XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes, SyntaxToken greaterThanToken)
        {
            if (lessThanToken.Kind() != SyntaxKind.LessThanToken) throw new ArgumentException(nameof(lessThanToken));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (greaterThanToken.Kind() != SyntaxKind.GreaterThanToken) throw new ArgumentException(nameof(greaterThanToken));
            return (XmlElementStartTagSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlElementStartTag((Syntax.InternalSyntax.SyntaxToken)lessThanToken.Node!, (Syntax.InternalSyntax.XmlNameSyntax)name.Green, attributes.Node.ToGreenList<Syntax.InternalSyntax.XmlAttributeSyntax>(), (Syntax.InternalSyntax.SyntaxToken)greaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        public static XmlElementStartTagSyntax XmlElementStartTag(XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes)
            => SyntaxFactory.XmlElementStartTag(SyntaxFactory.Token(SyntaxKind.LessThanToken), name, attributes, SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        /// <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        public static XmlElementStartTagSyntax XmlElementStartTag(XmlNameSyntax name)
            => SyntaxFactory.XmlElementStartTag(SyntaxFactory.Token(SyntaxKind.LessThanToken), name, default, SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        /// <summary>Creates a new XmlElementEndTagSyntax instance.</summary>
        public static XmlElementEndTagSyntax XmlElementEndTag(SyntaxToken lessThanSlashToken, XmlNameSyntax name, SyntaxToken greaterThanToken)
        {
            if (lessThanSlashToken.Kind() != SyntaxKind.LessThanSlashToken) throw new ArgumentException(nameof(lessThanSlashToken));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (greaterThanToken.Kind() != SyntaxKind.GreaterThanToken) throw new ArgumentException(nameof(greaterThanToken));
            return (XmlElementEndTagSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlElementEndTag((Syntax.InternalSyntax.SyntaxToken)lessThanSlashToken.Node!, (Syntax.InternalSyntax.XmlNameSyntax)name.Green, (Syntax.InternalSyntax.SyntaxToken)greaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlElementEndTagSyntax instance.</summary>
        public static XmlElementEndTagSyntax XmlElementEndTag(XmlNameSyntax name)
            => SyntaxFactory.XmlElementEndTag(SyntaxFactory.Token(SyntaxKind.LessThanSlashToken), name, SyntaxFactory.Token(SyntaxKind.GreaterThanToken));

        /// <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        public static XmlEmptyElementSyntax XmlEmptyElement(SyntaxToken lessThanToken, XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes, SyntaxToken slashGreaterThanToken)
        {
            if (lessThanToken.Kind() != SyntaxKind.LessThanToken) throw new ArgumentException(nameof(lessThanToken));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (slashGreaterThanToken.Kind() != SyntaxKind.SlashGreaterThanToken) throw new ArgumentException(nameof(slashGreaterThanToken));
            return (XmlEmptyElementSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlEmptyElement((Syntax.InternalSyntax.SyntaxToken)lessThanToken.Node!, (Syntax.InternalSyntax.XmlNameSyntax)name.Green, attributes.Node.ToGreenList<Syntax.InternalSyntax.XmlAttributeSyntax>(), (Syntax.InternalSyntax.SyntaxToken)slashGreaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        public static XmlEmptyElementSyntax XmlEmptyElement(XmlNameSyntax name, SyntaxList<XmlAttributeSyntax> attributes)
            => SyntaxFactory.XmlEmptyElement(SyntaxFactory.Token(SyntaxKind.LessThanToken), name, attributes, SyntaxFactory.Token(SyntaxKind.SlashGreaterThanToken));

        /// <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        public static XmlEmptyElementSyntax XmlEmptyElement(XmlNameSyntax name)
            => SyntaxFactory.XmlEmptyElement(SyntaxFactory.Token(SyntaxKind.LessThanToken), name, default, SyntaxFactory.Token(SyntaxKind.SlashGreaterThanToken));

        /// <summary>Creates a new XmlNameSyntax instance.</summary>
        public static XmlNameSyntax XmlName(XmlPrefixSyntax? prefix, SyntaxToken localName)
        {
            if (localName.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(localName));
            return (XmlNameSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlName(prefix == null ? null : (Syntax.InternalSyntax.XmlPrefixSyntax)prefix.Green, (Syntax.InternalSyntax.SyntaxToken)localName.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlNameSyntax instance.</summary>
        public static XmlNameSyntax XmlName(SyntaxToken localName)
            => SyntaxFactory.XmlName(default, localName);

        /// <summary>Creates a new XmlNameSyntax instance.</summary>
        public static XmlNameSyntax XmlName(string localName)
            => SyntaxFactory.XmlName(default, SyntaxFactory.Identifier(localName));

        /// <summary>Creates a new XmlPrefixSyntax instance.</summary>
        public static XmlPrefixSyntax XmlPrefix(SyntaxToken prefix, SyntaxToken colonToken)
        {
            if (prefix.Kind() != SyntaxKind.IdentifierToken) throw new ArgumentException(nameof(prefix));
            if (colonToken.Kind() != SyntaxKind.ColonToken) throw new ArgumentException(nameof(colonToken));
            return (XmlPrefixSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlPrefix((Syntax.InternalSyntax.SyntaxToken)prefix.Node!, (Syntax.InternalSyntax.SyntaxToken)colonToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlPrefixSyntax instance.</summary>
        public static XmlPrefixSyntax XmlPrefix(SyntaxToken prefix)
            => SyntaxFactory.XmlPrefix(prefix, SyntaxFactory.Token(SyntaxKind.ColonToken));

        /// <summary>Creates a new XmlPrefixSyntax instance.</summary>
        public static XmlPrefixSyntax XmlPrefix(string prefix)
            => SyntaxFactory.XmlPrefix(SyntaxFactory.Identifier(prefix), SyntaxFactory.Token(SyntaxKind.ColonToken));

        /// <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, SyntaxTokenList textTokens, SyntaxToken endQuoteToken)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (equalsToken.Kind() != SyntaxKind.EqualsToken) throw new ArgumentException(nameof(equalsToken));
            switch (startQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(startQuoteToken));
            }
            switch (endQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(endQuoteToken));
            }
            return (XmlTextAttributeSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlTextAttribute((Syntax.InternalSyntax.XmlNameSyntax)name.Green, (Syntax.InternalSyntax.SyntaxToken)equalsToken.Node!, (Syntax.InternalSyntax.SyntaxToken)startQuoteToken.Node!, textTokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.SyntaxToken)endQuoteToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, SyntaxTokenList textTokens, SyntaxToken endQuoteToken)
            => SyntaxFactory.XmlTextAttribute(name, SyntaxFactory.Token(SyntaxKind.EqualsToken), startQuoteToken, textTokens, endQuoteToken);

        /// <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        public static XmlTextAttributeSyntax XmlTextAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, SyntaxToken endQuoteToken)
            => SyntaxFactory.XmlTextAttribute(name, SyntaxFactory.Token(SyntaxKind.EqualsToken), startQuoteToken, default(SyntaxTokenList), endQuoteToken);

        /// <summary>Creates a new XmlCrefAttributeSyntax instance.</summary>
        public static XmlCrefAttributeSyntax XmlCrefAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, CrefSyntax cref, SyntaxToken endQuoteToken)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (equalsToken.Kind() != SyntaxKind.EqualsToken) throw new ArgumentException(nameof(equalsToken));
            switch (startQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(startQuoteToken));
            }
            if (cref == null) throw new ArgumentNullException(nameof(cref));
            switch (endQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(endQuoteToken));
            }
            return (XmlCrefAttributeSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlCrefAttribute((Syntax.InternalSyntax.XmlNameSyntax)name.Green, (Syntax.InternalSyntax.SyntaxToken)equalsToken.Node!, (Syntax.InternalSyntax.SyntaxToken)startQuoteToken.Node!, (Syntax.InternalSyntax.CrefSyntax)cref.Green, (Syntax.InternalSyntax.SyntaxToken)endQuoteToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlCrefAttributeSyntax instance.</summary>
        public static XmlCrefAttributeSyntax XmlCrefAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, CrefSyntax cref, SyntaxToken endQuoteToken)
            => SyntaxFactory.XmlCrefAttribute(name, SyntaxFactory.Token(SyntaxKind.EqualsToken), startQuoteToken, cref, endQuoteToken);

        /// <summary>Creates a new XmlNameAttributeSyntax instance.</summary>
        public static XmlNameAttributeSyntax XmlNameAttribute(XmlNameSyntax name, SyntaxToken equalsToken, SyntaxToken startQuoteToken, IdentifierEx identifier, SyntaxToken endQuoteToken)
        {
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (equalsToken.Kind() != SyntaxKind.EqualsToken) throw new ArgumentException(nameof(equalsToken));
            switch (startQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(startQuoteToken));
            }
            if (identifier == null) throw new ArgumentNullException(nameof(identifier));
            switch (endQuoteToken.Kind())
            {
                case SyntaxKind.SingleQuoteToken:
                case SyntaxKind.DoubleQuoteToken: break;
                default: throw new ArgumentException(nameof(endQuoteToken));
            }
            return (XmlNameAttributeSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlNameAttribute((Syntax.InternalSyntax.XmlNameSyntax)name.Green, (Syntax.InternalSyntax.SyntaxToken)equalsToken.Node!, (Syntax.InternalSyntax.SyntaxToken)startQuoteToken.Node!, (Syntax.InternalSyntax.IdentifierEx)identifier.Green, (Syntax.InternalSyntax.SyntaxToken)endQuoteToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlNameAttributeSyntax instance.</summary>
        public static XmlNameAttributeSyntax XmlNameAttribute(XmlNameSyntax name, SyntaxToken startQuoteToken, IdentifierEx identifier, SyntaxToken endQuoteToken)
            => SyntaxFactory.XmlNameAttribute(name, SyntaxFactory.Token(SyntaxKind.EqualsToken), startQuoteToken, identifier, endQuoteToken);

        /// <summary>Creates a new XmlTextSyntax instance.</summary>
        public static XmlTextSyntax XmlText(SyntaxTokenList textTokens)
        {
            return (XmlTextSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlText(textTokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>()).CreateRed();
        }

        /// <summary>Creates a new XmlTextSyntax instance.</summary>
        public static XmlTextSyntax XmlText()
            => SyntaxFactory.XmlText(default(SyntaxTokenList));

        /// <summary>Creates a new XmlCDataSectionSyntax instance.</summary>
        public static XmlCDataSectionSyntax XmlCDataSection(SyntaxToken startCDataToken, SyntaxTokenList textTokens, SyntaxToken endCDataToken)
        {
            if (startCDataToken.Kind() != SyntaxKind.XmlCDataStartToken) throw new ArgumentException(nameof(startCDataToken));
            if (endCDataToken.Kind() != SyntaxKind.XmlCDataEndToken) throw new ArgumentException(nameof(endCDataToken));
            return (XmlCDataSectionSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlCDataSection((Syntax.InternalSyntax.SyntaxToken)startCDataToken.Node!, textTokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.SyntaxToken)endCDataToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlCDataSectionSyntax instance.</summary>
        public static XmlCDataSectionSyntax XmlCDataSection(SyntaxTokenList textTokens = default)
            => SyntaxFactory.XmlCDataSection(SyntaxFactory.Token(SyntaxKind.XmlCDataStartToken), textTokens, SyntaxFactory.Token(SyntaxKind.XmlCDataEndToken));

        /// <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        public static XmlProcessingInstructionSyntax XmlProcessingInstruction(SyntaxToken startProcessingInstructionToken, XmlNameSyntax name, SyntaxTokenList textTokens, SyntaxToken endProcessingInstructionToken)
        {
            if (startProcessingInstructionToken.Kind() != SyntaxKind.XmlProcessingInstructionStartToken) throw new ArgumentException(nameof(startProcessingInstructionToken));
            if (name == null) throw new ArgumentNullException(nameof(name));
            if (endProcessingInstructionToken.Kind() != SyntaxKind.XmlProcessingInstructionEndToken) throw new ArgumentException(nameof(endProcessingInstructionToken));
            return (XmlProcessingInstructionSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlProcessingInstruction((Syntax.InternalSyntax.SyntaxToken)startProcessingInstructionToken.Node!, (Syntax.InternalSyntax.XmlNameSyntax)name.Green, textTokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.SyntaxToken)endProcessingInstructionToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        public static XmlProcessingInstructionSyntax XmlProcessingInstruction(XmlNameSyntax name, SyntaxTokenList textTokens)
            => SyntaxFactory.XmlProcessingInstruction(SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionStartToken), name, textTokens, SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionEndToken));

        /// <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        public static XmlProcessingInstructionSyntax XmlProcessingInstruction(XmlNameSyntax name)
            => SyntaxFactory.XmlProcessingInstruction(SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionStartToken), name, default(SyntaxTokenList), SyntaxFactory.Token(SyntaxKind.XmlProcessingInstructionEndToken));

        /// <summary>Creates a new XmlCommentSyntax instance.</summary>
        public static XmlCommentSyntax XmlComment(SyntaxToken lessThanExclamationMinusMinusToken, SyntaxTokenList textTokens, SyntaxToken minusMinusGreaterThanToken)
        {
            if (lessThanExclamationMinusMinusToken.Kind() != SyntaxKind.XmlCommentStartToken) throw new ArgumentException(nameof(lessThanExclamationMinusMinusToken));
            if (minusMinusGreaterThanToken.Kind() != SyntaxKind.XmlCommentEndToken) throw new ArgumentException(nameof(minusMinusGreaterThanToken));
            return (XmlCommentSyntax)Syntax.InternalSyntax.SyntaxFactory.XmlComment((Syntax.InternalSyntax.SyntaxToken)lessThanExclamationMinusMinusToken.Node!, textTokens.Node.ToGreenList<Syntax.InternalSyntax.SyntaxToken>(), (Syntax.InternalSyntax.SyntaxToken)minusMinusGreaterThanToken.Node!).CreateRed();
        }

        /// <summary>Creates a new XmlCommentSyntax instance.</summary>
        public static XmlCommentSyntax XmlComment(SyntaxTokenList textTokens = default)
            => SyntaxFactory.XmlComment(SyntaxFactory.Token(SyntaxKind.XmlCommentStartToken), textTokens, SyntaxFactory.Token(SyntaxKind.XmlCommentEndToken));
    }
}
