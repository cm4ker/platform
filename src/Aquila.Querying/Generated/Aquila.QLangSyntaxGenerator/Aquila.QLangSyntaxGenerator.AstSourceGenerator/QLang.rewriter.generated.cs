/// <auto-generated />


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using Aquila.Metadata;
using Aquila.Core.Querying.Model;
using Aquila.Core.Querying;
using System.Linq;

public class QLangTreeRewriter : QLangVisitorBase<QLangElement> {
public override QLangElement VisitQFieldList(QFieldList arg) {
return new QFieldList(arg.Select(x => (QField)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQSourceFieldList(QSourceFieldList arg) {
return new QSourceFieldList(arg.Select(x => (QSourceFieldExpression)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQJoinList(QJoinList arg) {
return new QJoinList(arg.Select(x => (QFromItem)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQExpressionList(QExpressionList arg) {
return new QExpressionList(arg.Select(x => (QExpression)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQExpressionSet(QExpressionSet arg) {
return new QExpressionSet(arg.Select(x => (QExpressionList)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQDataSourceList(QDataSourceList arg) {
return new QDataSourceList(arg.Select(x => (QDataSource)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQOrderList(QOrderList arg) {
return new QOrderList(arg.Select(x => (QOrderExpression)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQGroupList(QGroupList arg) {
return new QGroupList(arg.Select(x => (QGroupExpression)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQWhenList(QWhenList arg) {
return new QWhenList(arg.Select(x => (QWhen)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQQueryList(QQueryList arg) {
return new QQueryList(arg.Select(x => (QQueryBase)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQCriterionList(QCriterionList arg) {
return new QCriterionList(arg.Select(x => (QCriterion)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQAssignList(QAssignList arg) {
return new QAssignList(arg.Select(x => (QAssign)Visit(x)).ToImmutableArray());
}
public override QLangElement VisitQExpression(QExpression arg) {
return new QExpression();
}
public override QLangElement VisitQInsertQuery(QInsertQuery arg) {
var values = (QExpressionSet)Visit(arg.Values);
var insert = (QInsert)Visit(arg.Insert);
var criteria = (QCriterionList)Visit(arg.Criteria);
return new QInsertQuery(values,insert,criteria);
}
public override QLangElement VisitQInsertSelectQuery(QInsertSelectQuery arg) {
var select = (QSelectQuery)Visit(arg.Select);
var insert = (QInsert)Visit(arg.Insert);
return new QInsertSelectQuery(select,insert);
}
public override QLangElement VisitQUpdateQuery(QUpdateQuery arg) {
var update = (QUpdate)Visit(arg.Update);
var set = (QSet)Visit(arg.Set);
var from = (QFrom)Visit(arg.From);
var where = (QWhere)Visit(arg.Where);
return new QUpdateQuery(update,set,from,where);
}
public override QLangElement VisitQSelectQuery(QSelectQuery arg) {
var orderBy = (QOrderBy)Visit(arg.OrderBy);
var select = (QSelect)Visit(arg.Select);
var having = (QHaving)Visit(arg.Having);
var groupBy = (QGroupBy)Visit(arg.GroupBy);
var where = (QWhere)Visit(arg.Where);
var from = (QFrom)Visit(arg.From);
var criteria = (QCriterionList)Visit(arg.Criteria);
return new QSelectQuery(orderBy,select,having,groupBy,where,from,criteria);
}
public override QLangElement VisitQCriterion(QCriterion arg) {
var where = (QWhere)Visit(arg.Where);
var from = (QFrom)Visit(arg.From);
return new QCriterion(where,from);
}
public override QLangElement VisitQSelect(QSelect arg) {
var fields = (QFieldList)Visit(arg.Fields);
return new QSelect(fields);
}
public override QLangElement VisitQFrom(QFrom arg) {
var joins = (QJoinList)Visit(arg.Joins);
var source = (QDataSource)Visit(arg.Source);
return new QFrom(joins,source);
}
public override QLangElement VisitQGroupBy(QGroupBy arg) {
var expressions = (QGroupList)Visit(arg.Expressions);
return new QGroupBy(expressions);
}
public override QLangElement VisitQOrderBy(QOrderBy arg) {
var expressions = (QOrderList)Visit(arg.Expressions);
return new QOrderBy(expressions);
}
public override QLangElement VisitQWhere(QWhere arg) {
var expression = (QExpression)Visit(arg.Expression);
return new QWhere(expression);
}
public override QLangElement VisitQHaving(QHaving arg) {
var expression = (QExpression)Visit(arg.Expression);
return new QHaving(expression);
}
public override QLangElement VisitQInsert(QInsert arg) {
var fields = (QSourceFieldList)Visit(arg.Fields);
var target = (QPlatformDataSource)Visit(arg.Target);
return new QInsert(fields,target);
}
public override QLangElement VisitQUpdate(QUpdate arg) {
var target = (QPlatformDataSource)Visit(arg.Target);
return new QUpdate(target);
}
public override QLangElement VisitQSet(QSet arg) {
var assigns = (QAssignList)Visit(arg.Assigns);
return new QSet(assigns);
}
public override QLangElement VisitQAssign(QAssign arg) {
var target = (QSourceFieldExpression)Visit(arg.Target);
var value = (QExpression)Visit(arg.Value);
return new QAssign(target,value);
}
public override QLangElement VisitQAliasedDataSource(QAliasedDataSource arg) {
var parentSource = (QDataSource)Visit(arg.ParentSource);
var alias = arg.Alias;
return new QAliasedDataSource(parentSource,alias);
}
public override QLangElement VisitQCombinedDataSource(QCombinedDataSource arg) {
var dataSources = (QDataSourceList)Visit(arg.DataSources);
return new QCombinedDataSource(dataSources);
}
public override QLangElement VisitQNestedQuery(QNestedQuery arg) {
var nested = (QSelectQuery)Visit(arg.Nested);
return new QNestedQuery(nested);
}
public override QLangElement VisitQObjectTable(QObjectTable arg) {
var objectType = arg.ObjectType;
return new QObjectTable(objectType);
}
public override QLangElement VisitQTable(QTable arg) {
var objectTable = (QObjectTable)Visit(arg.ObjectTable);
return new QTable(objectTable);
}
public override QLangElement VisitQIntermediateSourceField(QIntermediateSourceField arg) {
var field = (QField)Visit(arg.Field);
var dataSource = (QDataSource)Visit(arg.DataSource);
return new QIntermediateSourceField(field,dataSource);
}
public override QLangElement VisitQNestedQueryField(QNestedQueryField arg) {
var field = (QField)Visit(arg.Field);
var dataSource = (QDataSource)Visit(arg.DataSource);
return new QNestedQueryField(field,dataSource);
}
public override QLangElement VisitQLookupField(QLookupField arg) {
var propName = arg.PropName;
var baseExpression = (QExpression)Visit(arg.BaseExpression);
return new QLookupField(propName,baseExpression);
}
public override QLangElement VisitQSourceFieldExpression(QSourceFieldExpression arg) {
var platformSource = (QPlatformDataSource)Visit(arg.PlatformSource);
var property = arg.Property;
return new QSourceFieldExpression(platformSource,property);
}
public override QLangElement VisitQOrderExpression(QOrderExpression arg) {
var sortingDirection = arg.SortingDirection;
var expression = (QExpression)Visit(arg.Expression);
return new QOrderExpression(sortingDirection,expression);
}
public override QLangElement VisitQGroupExpression(QGroupExpression arg) {
var expression = (QExpression)Visit(arg.Expression);
return new QGroupExpression(expression);
}
public override QLangElement VisitQSelectExpression(QSelectExpression arg) {
var expression = (QExpression)Visit(arg.Expression);
return new QSelectExpression(expression);
}
public override QLangElement VisitQAliasedSelectExpression(QAliasedSelectExpression arg) {
var aliasedExpression = (QExpression)Visit(arg.AliasedExpression);
var alias = arg.Alias;
return new QAliasedSelectExpression(aliasedExpression,alias);
}
public override QLangElement VisitQFromItem(QFromItem arg) {
var condition = (QExpression)Visit(arg.Condition);
var joined = (QDataSource)Visit(arg.Joined);
var joinType = arg.JoinType;
return new QFromItem(condition,joined,joinType);
}
public override QLangElement VisitQConst(QConst arg) {
return new QConst();
}
public override QLangElement VisitQParameter(QParameter arg) {
var name = arg.Name;
return new QParameter(name);
}
public override QLangElement VisitQVar(QVar arg) {
var name = arg.Name;
return new QVar(name);
}
public override QLangElement VisitQCase(QCase arg) {
var @else = (QExpression)Visit(arg.Else);
var whens = (QWhenList)Visit(arg.Whens);
return new QCase(@else,whens);
}
public override QLangElement VisitQWhen(QWhen arg) {
var then = (QExpression)Visit(arg.Then);
var @when = (QOperationExpression)Visit(arg.When);
return new QWhen(then,@when);
}
public override QLangElement VisitQOperationExpression(QOperationExpression arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QOperationExpression(left,right);
}
public override QLangElement VisitQAnd(QAnd arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QAnd(left,right);
}
public override QLangElement VisitQAdd(QAdd arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QAdd(left,right);
}
public override QLangElement VisitQOr(QOr arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QOr(left,right);
}
public override QLangElement VisitQEquals(QEquals arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QEquals(left,right);
}
public override QLangElement VisitQNotEquals(QNotEquals arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QNotEquals(left,right);
}
public override QLangElement VisitQGreatThen(QGreatThen arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QGreatThen(left,right);
}
public override QLangElement VisitQLessThen(QLessThen arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QLessThen(left,right);
}
public override QLangElement VisitQLessThenOrEquals(QLessThenOrEquals arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QLessThenOrEquals(left,right);
}
public override QLangElement VisitQGreatThenOrEquals(QGreatThenOrEquals arg) {
var left = (QExpression)Visit(arg.Left);
var right = (QExpression)Visit(arg.Right);
return new QGreatThenOrEquals(left,right);
}
public override QLangElement VisitQCast(QCast arg) {
var type = arg.Type;
var baseExpression = (QExpression)Visit(arg.BaseExpression);
return new QCast(type,baseExpression);
}
public override QLangElement VisitQDataRequest(QDataRequest arg) {
var source = (QFieldList)Visit(arg.Source);
return new QDataRequest(source);
}
}