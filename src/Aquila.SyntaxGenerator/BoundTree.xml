<?xml version="1.0" encoding="utf-8"?>

<Config>
    <!-- region Statement -->
    <Syntax Name="Statement" IsAbstract="true"/>

    <Syntax Name="EmptyStmt" OperationKind="Empty" Base="Statement">
        <Arguments>
            <Single Name="Span" Type="Microsoft.CodeAnalysis.Text.TextSpan" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="Block" OperationKind="Block" Base="Statement" NS="Graph">
        <Arguments>
            <Single Name="Statements" Type="List&lt;BoundStatement&gt;" IsUpdatable="true"/>
            <Single Name="NextEdge" Type="Edge" IsUpdatable="true" Default="null"/>
        </Arguments>
    </Syntax>

    <Syntax Name="DeclareStmt" Base="Statement" OperationKind="None"/>

    <Syntax Name="ExpressionStmt" Base="Statement" OperationKind="ExpressionStatement">
        <Arguments>
            <Single Name="Expression" Type="BoundExpression" IsUpdatable="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GlobalConstDeclStmt" Base="Statement" OperationKind="VariableDeclaration">
        <Arguments>
            <Single Name="Name" Type="QualifiedName" IsUpdatable="true"/>
            <Single Name="Value" Type="BoundExpression" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="ReturnStmt" Base="Statement" OperationKind="Return">
        <Arguments>
            <Single Name="Returned" Type="BoundExpression" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="StaticVarStmt" Base="Statement"/>

    <Syntax Name="YieldStmt" Base="Statement" OperationKind="YieldReturn"/>

    <Syntax Name="ForEachStmt" Base="Statement" OperationKind="Loop">
        <Arguments>
            <Single Name="Item" Type="BoundReferenceEx" IsUpdatable="true"/>
            <Single Name="Collection" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="BoundInfo" Type="ForeachBindInfo" IsUpdatable="false"/>
        </Arguments>
    </Syntax>
    <Syntax Name="BadStmt" Base="Statement" OperationKind="None">
        <Arguments>

        </Arguments>
    </Syntax>
    <!-- region HtmlStmt -->
    <Syntax Name="HtmlMarkupStmt" Base="Statement" OperationKind="None">
        <Arguments>
            <Single Name="Markup" Type="string" IsUpdatable="true"/>
            <Single Name="InstructionIndex" Type="int" IsUpdatable="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="HtmlOpenElementStmt" Base="Statement" OperationKind="None">
        <Arguments>
            <Single Name="ElementName" Type="string" IsUpdatable="true"/>
            <Single Name="InstructionIndex" Type="int" IsUpdatable="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="HtmlCloseElementStmt" Base="Statement" OperationKind="None"/>
    <Syntax Name="HtmlAddAttributeStmt" Base="Statement" OperationKind="None">
        <Arguments>
            <Single Name="AttributeName" Type="string" IsUpdatable="true"/>
            <Single Name="Expression" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="InstructionIndex" Type="int" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->
    <!-- endregion -->

    <!-- region Expression -->
    <Syntax Name="Expression" IsAbstract="true">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ArrayEx" OperationKind="ArrayCreation" Base="Expression">
        <Arguments>
            <Single Name="Items" Type="ImmutableArray&lt;KeyValuePair&lt;BoundExpression, BoundExpression&gt;&gt;"
                    IsUpdatable="true"/>

            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <!--    <Syntax Name="ArrayInit" Base="Expression"/>-->
    <Syntax Name="AssignEx" Base="Expression">
        <Arguments>
            <Single Name="Target" Type="BoundReferenceEx" IsUpdatable="true"/>
            <Single Name="Value" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CompoundAssignEx" Base="AssignEx" OperationKind="CompoundAssignment">
        <Arguments>
            <Single Name="Target" Type="BoundReferenceEx" IsUpdatable="true" OnlyArgument="true"
                    PassBase="true"/>
            <Single Name="Value" Type="BoundExpression" IsUpdatable="true" OnlyArgument="true" PassBase="true"/>
            <Single Name="Operation" Type="Operations" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IncDecEx" Base="CompoundAssignEx">
        <Arguments>
            <Single Name="Target" Type="BoundReferenceEx" IsUpdatable="true" OnlyArgument="true"
                    PassBase="true"/>
            <Single Name="IsIncrement" Type="bool" IsUpdatable="true"/>
            <Single Name="IsPostfix" Type="bool" IsUpdatable="true"/>
            <Single PassBase="true" PassBaseConst="new BoundLiteral(1, resultType).WithAccess(BoundAccess.Read)"/>
            <Single PassBase="true" PassBaseConst="Operations.IncDec"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UnaryEx" Base="Expression" OperationKind="UnaryOperator">
        <Arguments>
            <Single Name="Operand" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="Operation" Type="Operations" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="BinaryEx" Base="Expression" OperationKind="BinaryOperator">
        <Arguments>
            <Single Name="Left" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="Right" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="Operation" Type="Operations" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ConditionalEx" Base="Expression">
        <Arguments>
            <Single Name="Condition" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="IfTrue" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="IfFalse" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ConversionEx" Base="Expression">
        <Arguments>
            <Single Name="Operand" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="TargetType" Type="BoundTypeRef" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Literal" Base="Expression">
        <Arguments>
            <Single Name="Value" Type="object" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="WildcardEx" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MatchEx" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="Expression" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="Arms" Type="List&lt;BoundMatchArm&gt;" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MatchArm" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="Pattern" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="WhenGuard" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="MatchResult" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="BadEx" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="FuncEx" Base="Expression" OperationKind="AnonymousFunction">
        <Arguments>
            <Single Name="Statements" Type="List&lt;BoundStatement&gt;" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <!-- region MemberAccess -->

    <!-- region Call -->
    <Syntax Name="CallEx" Base="Expression" OperationKind="Invocation">
        <Arguments>
            <Single Name="MethodSymbol" Type="MethodSymbol" IsInternal="true" IsUpdatable="true"/>
            <Single Name="Arguments" Type="ImmutableArray&lt;BoundArgument&gt;" IsUpdatable="true"/>
            <Single Name="TypeArguments" Type="ImmutableArray&lt;ITypeSymbol&gt;" IsUpdatable="true"/>
            <Single Name="Instance" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

    <Syntax Name="NewEx" Base="Expression" OperationKind="ObjectCreation">
        <Arguments>
            <Single Name="MethodSymbol" Type="MethodSymbol" IsInternal="true"/>
            <Single Name="TypeRef" Type="ITypeSymbol"/>
            <Single Name="Arguments" Type="ImmutableArray&lt;BoundArgument&gt;"/>
            <Single Name="TypeArguments" Type="ImmutableArray&lt;ITypeSymbol&gt;"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <!-- endregion MemberAccess -->

    <Syntax Name="ThrowEx" Base="Expression" OperationKind="Throw">
        <Arguments>
            <Single Name="Thrown" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="AllocEx" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="TypeRef" Type="ITypeSymbol"/>
            <Single Name="Initializer" Type="List&lt;BoundAllocExAssign&gt;" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="AllocExAssign" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="ReceiverSymbol" Type="ISymbol"/>
            <Single Name="Expression" Type="BoundExpression"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true"
                    IsInternal="true" PassBaseConst="expression.Type"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GroupedEx" Base="Expression" OperationKind="None">
        <Arguments>
            <Single Name="Expressions" Type="List&lt;BoundExpression&gt;" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <!-- region ReferenceEx -->
    <Syntax Name="ReferenceEx" Base="Expression" IsAbstract="true">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ArrayItemEx" Base="ReferenceEx">
        <Arguments>
            <Single Name="DeclaringCompilation" Type="AquilaCompilation" IsUpdatable="false"/>
            <Single Name="Array" Type="BoundExpression" IsUpdatable="false"/>
            <Single Name="Index" Type="BoundExpression" IsUpdatable="false"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ArrayItemOrdEx" Base="ArrayItemEx">
        <Arguments>
            <Single Name="DeclaringCompilation" Type="AquilaCompilation" OnlyArgument="true" PassBase="true"/>
            <Single Name="Array" Type="BoundExpression" OnlyArgument="true" PassBase="true"/>
            <Single Name="Index" Type="BoundExpression" OnlyArgument="true" PassBase="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="FieldRef" Base="ReferenceEx" OperationKind="FieldReference">
        <Arguments>
            <Single Name="Field" Type="IFieldSymbol"/>
            <Single Name="Instance" Type="BoundExpression"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true"
                    IsInternal="true" PassBaseConst="field.Type"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ListEx" Base="ReferenceEx" OperationKind="None">
        <Arguments>
            <Single Name="Items" Type="ImmutableArray&lt;KeyValuePair&lt;BoundExpression, BoundReferenceEx&gt;&gt;"
                    IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="VariableRef" Base="ReferenceEx" OperationKind="LocalReference">
        <Arguments>
            <Single Name="Name" Type="BoundVariableName" IsUpdatable="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PropertyRef" Base="ReferenceEx" OperationKind="Invocation">
        <Arguments>
            <Single Name="Property" Type="IPropertySymbol"/>
            <Single Name="Instance" Type="BoundExpression"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true"
                    IsInternal="true" PassBaseConst="property.Type"/>
        </Arguments>
    </Syntax>

    <!-- endregion -->

    <!-- endregion -->

    <!-- region Argument -->
    <Syntax Name="Argument">
        <Arguments>
            <Single Name="Value" Type="BoundExpression" IsUpdatable="true"/>
            <Single Name="ArgumentKind" Type="ArgumentKind" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

    <!-- region MethodName -->
    <Syntax Name="MethodName">
        <Arguments>
            <Single Name="name" Type="QualifiedName" IsUpdatable="true"/>
            <Single Name="nameExpr" Type="BoundExpression" IsUpdatable="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

    <!-- region TypeRef -->
    <Syntax Name="TypeRef" IsAbstract="true" Base="Expression">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="ArrayTypeRef" Base="TypeRef" NS="TypeRef">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ClassTypeRef" Base="TypeRef" NS="TypeRef">
        <Arguments>
            <Single Name="QName" Type="QualifiedName"/>
            <Single Name="Method" Type="SourceMethodSymbolBase" IsInternal="true"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
            <Single Name="Arity" Type="int" Default="-1"/>
        </Arguments>
    </Syntax>
    <Syntax Name="GenericClassTypeRef" Base="TypeRef" NS="TypeRef">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PrimitiveTypeRef" Base="TypeRef" NS="TypeRef">
        <Arguments>
            <Single Name="Type" Type="AquilaTypeCode"/>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeRefFromSymbol" Base="TypeRef" NS="TypeRef">
        <Arguments>
            <Single Name="ResultType" Type="ITypeSymbol" PassBase="true" OnlyArgument="true" IsUpdatable="true"
                    IsInternal="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

    <!-- region Variable -->
    <Syntax Name="Variable" IsAbstract="true">
        <Arguments>
            <Single Name="VariableKind" Type="VariableKind"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IndirectLocal" Base="Variable">
        <Arguments>
            <Single Name="NameExpr" Type="BoundExpression"/>
            <Single PassBaseConst="VariableKind.LocalVariable" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Local" Base="Variable" OperationKind="VariableDeclaration">
        <Arguments>
            <Single Name="LocalSymbol" Type="SourceLocalSymbol" IsInternal="true"/>
            <Single Name="VariableKind" Type="VariableKind" PassBase="true" OnlyArgument="true"
                    Default="Symbols.VariableKind.LocalVariable"/>
        </Arguments>
    </Syntax>
    <Syntax Name="Parameter" Base="Variable" OperationKind="ParameterInitializer">
        <Arguments>
            <Single Name="ParameterSymbol" Type="ParameterSymbol" IsInternal="true"/>
            <Single Name="Initializer" Type="BoundExpression"/>

            <Single PassBaseConst="VariableKind.Parameter" PassBase="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="ThisParameter" Base="Variable" OperationKind="None">
        <Arguments>
            <Single Name="Method" Type="MethodSymbol" IsInternal="true"/>
            <Single PassBaseConst="VariableKind.ThisParameter" PassBase="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

    <!-- region VariableName -->
    <Syntax Name="VariableName" OperationKind="None">
        <Arguments>
            <Single Name="NameValue" Type="VariableName"/>
            <Single Name="NameExpression" Type="BoundExpression"/>
            <Single Name="ResultType" Type="ITypeSymbol" IsUpdatable="true" IsInternal="true"/>
        </Arguments>
    </Syntax>
    <!-- endregion -->

</Config>