using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Aquila.SyntaxGenerator.BoundTree
{
    public static class BoundTreeSyntaxGenerator
    {
        private static SyntaxToken publicToken = SyntaxFactory.Token(SyntaxKind.PublicKeyword);
        private static SyntaxToken partialToken = SyntaxFactory.Token(SyntaxKind.PartialKeyword);
        private static SyntaxToken staticToken = SyntaxFactory.Token(SyntaxKind.StaticKeyword);

        private static string ns_root = "Aquila.CodeAnalysis.Semantics";
        private static string VisitorClassName = "AquilaOperationVisitor";
        private static string MSVisitorClassName = "OperationVisitor";
        private static string AquilaVisitorClassName = "AquilaOperationVisitor";
        private static string NameBase = "BoundOperation";

        private static ClassDeclarationSyntax astTreeBaseCls = SyntaxFactory.ClassDeclaration($"{VisitorClassName}<T>")
            .AddModifiers(publicToken)
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.AbstractKeyword))
            .AddModifiers(partialToken);

        private static ClassDeclarationSyntax astTreeBaseCls2 = SyntaxFactory.ClassDeclaration(VisitorClassName)
            .AddModifiers(publicToken)
            .AddModifiers(SyntaxFactory.Token(SyntaxKind.AbstractKeyword))
            .AddModifiers(partialToken);


        public static void Main(string[] args)
        {
            if (args.Length == 0)
                Console.WriteLine($"Invalid using. Use {nameof(Aquila.SyntaxGenerator)} [PathToXmlScheme]");

            using (TextReader tr = new StreamReader(args[0]))
            {
                XmlSerializer xs = new XmlSerializer(typeof(Config));
                var root = (Config) xs.Deserialize(tr);

                StringBuilder sb = new StringBuilder();

                sb.AppendLine("/// <auto-generated />\n\n");

                var ns_definitions = $"{ns_root}";

                sb.AppendLine("using System;");
                sb.AppendLine("using System.Collections;");
                sb.AppendLine("using System.Collections.Generic;");
                //sb.AppendLine("using Aquila.CodeAnalysis.Semantics;");
                sb.AppendLine("using Microsoft.CodeAnalysis;");
                sb.AppendLine("using Microsoft.CodeAnalysis.Operations;");

                foreach (var syntax in root.Syntaxes)
                {
                    sb.AppendLine($"namespace {ns_definitions + (syntax.NS != null ? "." : "") + syntax.NS} {{");
                    GenerateClass(sb, syntax, new List<CompilerSyntax>());
                    sb.AppendLine("}");
                }


                if (args.Length == 2)
                {
                    using (var sw = new StreamWriter(args[1]))
                    {
                        var tree = SyntaxFactory.ParseSyntaxTree(sb.ToString());
                        sw.WriteLine(tree.GetRoot().NormalizeWhitespace());
                    }
                }
                else
                {
                    Console.WriteLine();
                }
            }
        }

        private static void GetVisitorMethod(StringBuilder sb, CompilerSyntax syntax)
        {
            sb.AppendLine(
                $"public override TRes Accept<TArg,TRes>({MSVisitorClassName}<TArg,TRes> visitor, TArg argument){{");
            sb.AppendLine($"TRes res = default; AcceptImpl(visitor, argument, ref res); return res;");
            sb.AppendLine("}");
        }

        private static void GetVisitorMethod2(StringBuilder sb, CompilerSyntax syntax)
        {
            sb.AppendLine(
                $"public override void Accept({MSVisitorClassName} visitor){{");
            sb.AppendLine($"AcceptImpl(visitor);");
            sb.AppendLine("}");
        }

        private static void GetVisitorMethodAquila(StringBuilder sb, CompilerSyntax syntax)
        {
            sb.AppendLine(
                $"public virtual TResult Accept<TResult>({AquilaVisitorClassName}<TResult> visitor){{");
            sb.AppendLine($"return default;");
            sb.AppendLine("}");
        }


        private static void GenerateClass(StringBuilder sb, CompilerSyntax syntax, List<CompilerSyntax> baseList)
        {
            sb.AppendLine(
                $"public {(syntax.IsAbstract ? "abstract" : "")} partial class {syntax.Name} : {syntax.Base ?? NameBase} {(!string.IsNullOrEmpty(syntax.Interface) ? $", {syntax.Interface}" : "")}");
            sb.AppendLine("{");


            sb.AppendLine($"public {syntax.Name}(");

            foreach (var arg in syntax.Arguments)
            {
                sb.Append($"{arg.Type} {arg.Name.ToCamelCase()}");
            }

            sb.Append("){");

            foreach (var arg in syntax.Arguments)
            {
                sb.Append($"{arg.Name} = {arg.Name.ToCamelCase()};");
            }

            sb.Append("}");

            foreach (var arg in syntax.Arguments)
            {
                sb.AppendLine($"public {arg.Type} {arg.Name} {{get;}}");
            }

            sb.AppendLine("public override OperationKind Kind { get; }");

            sb.AppendLine(
                "partial void AcceptImpl<TArg, TRes>(OperationVisitor<TArg, TRes> visitor, TArg argument, ref TRes result);");
            sb.AppendLine("partial void AcceptImpl(OperationVisitor visitor);");
            GetVisitorMethod(sb, syntax);
            GetVisitorMethod2(sb, syntax);
            GetVisitorMethodAquila(sb, syntax);

            sb.AppendLine("}");
        }
    }
}