<?xml version="1.0" encoding="utf-8"?>

<Config>
    <!-- #region  Lists -->

    <Syntax IsList="true" Base="MethodDecl" Name="MethodList"/>
    <Syntax IsList="true" Base="FieldDecl" Name="FieldList"/>
    <Syntax IsList="true" Base="TypeRef" Name="TypeList"/>
    <Syntax IsList="true" Base="Statement" Name="StatementList"/>
    <Syntax IsList="true" Base="Parameter" Name="ParameterList"/>
    <!--    <Syntax IsList="true" Base="GenericParameterSyntax" Name="GenericParameterList"/>-->
    <Syntax IsList="true" Base="Annotation" Name="AnnotationList"/>
    <Syntax IsList="true" Base="Argument" Name="ArgumentList"/>
    <!--    <Syntax IsList="true" Base="MatchAtom" Name="MatchAtomList"/>-->

    <Syntax IsList="true" Base="VarDeclarator" Name="DeclaratorList"/>

    <Syntax IsList="true" Base="UsingBase" Name="UsingList"/>
    <Syntax IsList="true" Base="CatchItem" Name="CatchList"/>
    <Syntax IsList="true" Base="SourceUnit" Name="SourceUnitList"/>

    <!-- #endregion -->

    <!-- #region Structure -->
    <Syntax Name="SourceUnit">
        <Arguments>
            <Single Name="FilePath" Type="string" DenyChildrenFill="true"/>            
            <List Name="Usings" Type="UsingList"/>
            <List Name="Methods" Type="MethodList"/>
            <List Name="Fields" Type="FieldList"/>
        </Arguments>
    </Syntax>

    <!-- #region Using -->
    <Syntax Name="UsingBase" IsAbstract="true">
        <Arguments>
            <Single Name="Name" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingDecl" Base="UsingBase">
        <Arguments>
            <Single Name="Name" PassBase="true" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingAliasDecl" Base="UsingBase">
        <Arguments>
            <Single Name="ClassName" PassBase="true" DenyChildrenFill="true" Type="String"/>
            <Single Name="Alias" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>
    <!-- #endregion -->

    <Syntax Name="Annotation">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <!-- #region Type members -->

    <!-- <Syntax Name="GenericParameter" NS="Functions">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax> -->

    <Syntax Name="Member" IsAbstract="true"/>

    <Syntax Name="Parameter" NS="Functions">
        <Arguments>
            <Single Name="Type" Type="TypeRef"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MethodDecl" Base="Member" NS="Functions">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <List Name="Parameters" Type="ParameterList"/>
            <!--            <List Name="GenericParameters" Type="GenericParameterList"/>-->
            <List Name="Annotations" Type="AnnotationList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="ReturnType" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <Syntax Name="FieldDecl" Base="Member">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <!-- #endregion -->

    <!-- #endregion -->

    <Syntax Name="IdentifierToken" Base="SyntaxToken">
        <Arguments>
            <Single Name="Text" DenyChildrenFill="true" OnlyArgument="true" PassBase="true" Type="String"/>
        </Arguments>
    </Syntax>

    <!-- #region Types-->
    <Syntax Name="TypeRef" IsAbstract="true"/>

    <Syntax Name="NamedTypeRef" Base="TypeRef">
        <Arguments>
            <Single Name="Value" Type="string" DenyChildrenFill="true" Default='"?"' Virtual="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PredefinedTypeRef" Base="TypeRef"/>

    <Syntax Name="ArrayType" Base="TypeRef">
        <Arguments>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <!-- <Syntax Name="GenericType" Base="Type">
        <Arguments>
            <List Name="Args" Type="TypeList"/>
        </Arguments>
    </Syntax> -->

    <!-- #endregion -->

    <!-- #region Expressions -->

    <Syntax Name="Expression" IsAbstract="true">
        <Arguments>
            <Single Name="Operation" Type="Operations" ImplicitPassInChildren="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="BinaryEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Right" Type="Expression"/>
            <Single Name="Left" Type="Expression"/>
            <!--            <Single Name="BinaryOperatorType" Type="BinaryOperatorType" DenyChildrenFill="true"/>-->
        </Arguments>
    </Syntax>

    <Syntax Name="UnaryExBase" IsAbstract="true" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CastEx" Base="UnaryExBase" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="CastType" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IndexerEx" Base="UnaryExBase" NS="Expressions">
        <Arguments>
            <Single Name="Indexer" Type="Expression"/>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UnaryEx" Base="UnaryExBase" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="AssignEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="RValue" Type="Expression"/>
            <Single Name="LValue" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MemberAccessEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <!-- #region Call -->

    <Syntax Name="CallEx" Base="Expression" NS="Expressions">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Argument" NS="Functions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <!-- #endregion-->

    <Syntax Name="New" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Namespace" Type="string" DenyChildrenFill="true"/>
            <Single Name="Call" Type="CallEx"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LiteralEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Value" Type="String" DenyChildrenFill="true"/>
            <Single Name="IsSqlLiteral" Type="bool" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IncDecEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Operand" Type="Expression"/>
            <Single Name="IsIncrement" Type="bool" DenyChildrenFill="true"/>
            <Single Name="IsPost" Type="bool" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ThrowEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="NameEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <!-- #endregion-->

    <!-- #region Statements-->

    <Syntax Name="Statement" IsAbstract="true" NS="Statements"/>

    <Syntax Name="BlockStmt" Base="Statement">
        <Arguments>
            <List Name="Statements" Type="StatementList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ReturnStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="BreakStmt" Base="Statement" NS="Statements"/>

    <Syntax Name="ContinueStmt" Base="Statement" NS="Statements"/>

    <!-- #region Variable-->

    <Syntax Name="VarDecl" Base="Statement">
        <Arguments>
            <Single Name="VariableType" Type="TypeRef"/>
            <List Name="Declarators" Type="DeclaratorList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="VarDeclarator">
        <Arguments>
            <Single Name="Initializer" Type="Expression"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <!-- #endregion-->

    <Syntax Name="DoWhileStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Block" Type="BlockStmt"/>
        </Arguments>
    </Syntax>

    <!-- #region Try -->
    <Syntax Name="TryStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="TryBlock" Type="BlockStmt"/>
            <Single Name="Catches" Type="CatchList"/>
            <Single Name="FinallyItem" Type="FinallyItem"/>
        </Arguments>
    </Syntax>
    <Syntax Name="CatchItem" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
        </Arguments>
    </Syntax>
    <Syntax Name="FinallyItem" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
        </Arguments>
    </Syntax>
    <!-- #endregion -->

    <Syntax Name="ExpressionStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ForStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <Single Name="Counter" Type="Expression"/>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Initializer" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="WhileStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <Single Name="Condition" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IfStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="ElseBlock" Type="Statement"/>
            <Single Name="ThenBlock" Type="Statement"/>
            <Single Name="Condition" Type="Expression"/>
        </Arguments>
    </Syntax>

    <!-- #endregion-->


</Config>