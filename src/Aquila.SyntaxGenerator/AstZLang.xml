<?xml version="1.0" encoding="utf-8"?>

<Config>
    <Syntax IsList="true" Base="MethodDeclarationSyntax" Name="MethodList"/>
    <Syntax IsList="true" Base="FieldDeclarationSyntax" Name="FieldList"/>
    <Syntax IsList="true" Base="TypeSyntax" Name="TypeList"/>
    <Syntax IsList="true" Base="StatementSyntax" Name="StatementList"/>
    <Syntax IsList="true" Base="ParameterSyntax" Name="ParameterList"/>
    <Syntax IsList="true" Base="GenericParameterSyntax" Name="GenericParameterList"/>
    <Syntax IsList="true" Base="AttributeSyntax" Name="AttributeList"/>
    <Syntax IsList="true" Base="ArgumentSyntax" Name="ArgumentList"/>
    <Syntax IsList="true" Base="MatchAtomSyntax" Name="MatchAtomList"/>

    <Syntax IsList="true" Base="UsingBase" Name="UsingList"/>
    <Syntax IsList="true" Base="CompilationUnitSyntax" Name="CompilationUnitList"/>

    <Syntax Name="CompilationUnitSyntax">
        <Arguments>
            <List Name="Usings" Type="UsingList"/>
            <List Name="Methods" Type="MethodList"/>
            <List Name="Fields" Type="FieldList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IdentifierToken" Base="SyntaxToken">
        <Arguments>
            <Single Name="Text" DenyChildrenFill="true" OnlyArgument="true" PassBase="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IdentifierName" Base="ExpressionSyntax">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingBase" IsAbstract="true">
        <Arguments>
            <Single Name="Name" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingDeclarationSyntax" Base="UsingBase">
        <Arguments>
            <Single Name="Name" PassBase="true" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingAliasDeclarationSyntax" Base="UsingBase">
        <Arguments>
            <Single Name="ClassName" PassBase="true" DenyChildrenFill="true" Type="String"/>
            <Single Name="Alias" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ExpressionSyntax" IsAbstract="true"/>

    <Syntax Name="StatementSyntax" IsAbstract="true" NS="Statements"/>

    <Syntax Name="BinaryExpressionSyntax" Base="ExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Right" Type="ExpressionSyntax"/>
            <Single Name="Left" Type="ExpressionSyntax"/>
            <Single Name="BinaryOperatorType" Type="BinaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="UnaryExpressionSyntax" Base="ExpressionSyntax" IsAbstract="true" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CastExpressionSyntax" Base="UnaryExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax" PassBase="true"/>
            <Single Name="CastType" Type="TypeSyntax"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IndexerExpressionSyntax" Base="UnaryExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Indexer" Type="ExpressionSyntax"/>
            <Single Name="Expression" Type="ExpressionSyntax" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LogicalOrArithmeticExpressionSyntax" Base="UnaryExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="AssignmentSyntax" Base="ExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Value" Type="ExpressionSyntax"/>
            <Single Name="Index" Type="ExpressionSyntax"/>
            <Single Name="Assignable" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeSyntax">
        <Arguments>
            <Single Name="Value" Type="string" DenyChildrenFill="true" Default='"?"' Virtual="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ArrayTypeSyntax" Base="TypeSyntax">
        <Arguments>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GenericTypeSyntax" Base="TypeSyntax">
        <Arguments>
            <List Name="Args" Type="TypeList"/>
        </Arguments>
    </Syntax>


    <Syntax Name="BlockSyntax" Base="StatementSyntax">
        <Arguments>
            <List Name="Statements" Type="StatementList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ParameterSyntax" NS="Functions">
        <Arguments>
            <Single Name="Type" Type="TypeSyntax"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GenericParameterSyntax" NS="Functions">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="AttributeSyntax">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MemberSyntax" IsAbstract="true"/>

    <Syntax Name="MethodDeclarationSyntax" Base="MemberSyntax" NS="Functions">
        <Arguments>
            <Single Name="Block" Type="BlockSyntax"/>
            <List Name="Parameters" Type="ParameterList"/>
            <List Name="GenericParameters" Type="GenericParameterList"/>
            <List Name="Attributes" Type="AttributeList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="FieldDeclarationSyntax" Base="MemberSyntax">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ArgumentSyntax" NS="Functions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CallSyntax" Base="ExpressionSyntax">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="NewSyntax" Base="ExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Namespace" Type="string" DenyChildrenFill="true"/>
            <Single Name="Call" Type="CallSyntax"/>
        </Arguments>
    </Syntax>

    <!--Test comment-->
    <Syntax Name="ReturnSyntax" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="BreakSyntax" Base="StatementSyntax" NS="Statements"/>
    <Syntax Name="ContinueSyntax" Base="StatementSyntax" NS="Statements"/>

    <Syntax Name="VariableDeclarationSyntax" Base="StatementSyntax">
        <Arguments>
            <Single Name="Initializer" Type="ExpressionSyntax"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="VariableType" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>


    <Syntax Name="ContextVariable" Base="ExpressionSyntax">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Literal" Base="ExpressionSyntax">
        <Arguments>
            <Single Name="Value" Type="String" DenyChildrenFill="true"/>
            <Single Name="IsSqlLiteral" Type="bool" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GetFieldExpression" Base="ExpressionSyntax">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LookupExpressionSyntax" Base="ExpressionSyntax" IsAbstract="true">
        <Arguments>
            <Single Name="Lookup" Type="ExpressionSyntax"/>
            <Single Name="Current" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PropertyLookupExpressionSyntax" Base="LookupExpressionSyntax">
        <Arguments>
            <Single Name="Lookup" Type="ExpressionSyntax" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="ExpressionSyntax" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MethodLookupExpressionSyntax" Base="LookupExpressionSyntax">
        <Arguments>
            <Single Name="Lookup" Type="ExpressionSyntax" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="ExpressionSyntax" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>


    <Syntax Name="AssignFieldExpression" Base="ExpressionSyntax">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="DoWhile" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="Condition" Type="ExpressionSyntax"/>
            <Single Name="Block" Type="BlockSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Try" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="TryBlock" Type="BlockSyntax"/>
            <Single Name="CatchBlock" Type="BlockSyntax"/>
            <Single Name="FinallyBlock" Type="BlockSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ExpressionStatement" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="For" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockSyntax"/>
            <Single Name="Counter" Type="ExpressionSyntax"/>
            <Single Name="Condition" Type="ExpressionSyntax"/>
            <Single Name="Initializer" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="While" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockSyntax"/>
            <Single Name="Condition" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="If" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <Single Name="ElseBlock" Type="BlockSyntax"/>
            <Single Name="ThenBlock" Type="BlockSyntax"/>
            <Single Name="Condition" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostOperationExpressionSyntax" Base="ExpressionSyntax" NS="Expressions" IsAbstract="true">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostIncrementExpressionSyntax" Base="PostOperationExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax" DenyChildrenFill="true" OnlyArgument="true"
                    PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostDecrementExpressionSyntax" Base="PostOperationExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax" DenyChildrenFill="true" OnlyArgument="true"
                    PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ThrowSyntax" Base="ExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Exception" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MatchAtomSyntax" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockSyntax"/>
            <Single Name="Expression" Type="ExpressionSyntax"/>
            <Single Name="Type" Type="TypeSyntax"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Match" Base="StatementSyntax" NS="Statements">
        <Arguments>
            <List Name="Matches" Type="MatchAtomList"/>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>


    <Syntax Name="GlobalVar" Base="ExpressionSyntax" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="ExpressionSyntax"/>
        </Arguments>
    </Syntax>

</Config>