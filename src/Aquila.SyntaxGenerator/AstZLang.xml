<?xml version="1.0" encoding="utf-8"?>

<Config>
    <Syntax IsList="true" Base="MethodDecl" Name="MethodList"/>
    <Syntax IsList="true" Base="FieldDecl" Name="FieldList"/>
    <Syntax IsList="true" Base="TypeRef" Name="TypeList"/>
    <Syntax IsList="true" Base="Statement" Name="StatementList"/>
    <Syntax IsList="true" Base="Parameter" Name="ParameterList"/>
<!--    <Syntax IsList="true" Base="GenericParameterSyntax" Name="GenericParameterList"/>-->
    <Syntax IsList="true" Base="Annotation" Name="AnnotationList"/>
    <Syntax IsList="true" Base="Argument" Name="ArgumentList"/>
<!--    <Syntax IsList="true" Base="MatchAtom" Name="MatchAtomList"/>-->

    <Syntax IsList="true" Base="VarDeclarator" Name="DeclaratorList"/>

    <Syntax IsList="true" Base="UsingBase" Name="UsingList"/>
    <Syntax IsList="true" Base="CompilationUnit" Name="CompilationUnitList"/>

    <Syntax Name="CompilationUnit">
        <Arguments>
            <List Name="Usings" Type="UsingList"/>
            <List Name="Methods" Type="MethodList"/>
            <List Name="Fields" Type="FieldList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IdentifierToken" Base="SyntaxToken">
        <Arguments>
            <Single Name="Text" DenyChildrenFill="true" OnlyArgument="true" PassBase="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IdentifierName" Base="Expression">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingBase" IsAbstract="true">
        <Arguments>
            <Single Name="Name" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingDecl" Base="UsingBase">
        <Arguments>
            <Single Name="Name" PassBase="true" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="UsingAliasDecl" Base="UsingBase">
        <Arguments>
            <Single Name="ClassName" PassBase="true" DenyChildrenFill="true" Type="String"/>
            <Single Name="Alias" DenyChildrenFill="true" Type="String"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Expression" IsAbstract="true"/>

    <Syntax Name="Statement" IsAbstract="true" NS="Statements"/>

    <Syntax Name="BinaryEx" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Right" Type="Expression"/>
            <Single Name="Left" Type="Expression"/>
            <Single Name="BinaryOperatorType" Type="BinaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>
    <Syntax Name="UnaryEx" Base="Expression" IsAbstract="true" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="CastEx" Base="UnaryEx" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="CastType" Type="TypeRef"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="IndexerEx" Base="UnaryEx" NS="Expressions">
        <Arguments>
            <Single Name="Indexer" Type="Expression"/>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LogicalOrArithmeticEx" Base="UnaryEx" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" PassBase="true"/>
            <Single Name="OperaotrType" Type="UnaryOperatorType" DenyChildrenFill="true" PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Assignment" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Value" Type="Expression"/>
            <Single Name="Assignable" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TypeRef" Base="Expression" IsAbstract="true">
    </Syntax>

    <!-- Types-->
    
    <Syntax Name="NamedTypeRef" Base="TypeRef">
        <Arguments>
            <Single Name="Value" Type="string" DenyChildrenFill="true" Default='"?"' Virtual="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PredefinedTypeSyntax" Base="TypeRef">
        
    </Syntax>
    <!-- Types end -->


    <Syntax Name="ArrayType" Base="TypeRef">
        <Arguments>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

<!--    <Syntax Name="GenericType" Base="Type">-->
<!--        <Arguments>-->
<!--            <List Name="Args" Type="TypeList"/>-->
<!--        </Arguments>-->
<!--    </Syntax>-->


    <Syntax Name="BlockStmt" Base="Statement">
        <Arguments>
            <List Name="Statements" Type="StatementList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Parameter" NS="Functions">
        <Arguments>
            <Single Name="Type" Type="TypeRef"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GenericParameter" NS="Functions">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Annotation">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Member" IsAbstract="true"/>

    <Syntax Name="MethodDecl" Base="Member" NS="Functions">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <List Name="Parameters" Type="ParameterList"/>
<!--            <List Name="GenericParameters" Type="GenericParameterList"/>-->
            <List Name="Annotations" Type="AnnotationList"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <Syntax Name="FieldDecl" Base="Member">
        <Arguments>
            <Single Name="Identifier" Type="IdentifierToken"/>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Argument" NS="Functions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="PassMethod" Type="PassMethod" DenyChildrenFill="true" Default="PassMethod.ByValue"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Call" Base="Expression">
        <Arguments>
            <List Name="Arguments" Type="ArgumentList"/>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="New" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Namespace" Type="string" DenyChildrenFill="true"/>
            <Single Name="Call" Type="Call"/>
        </Arguments>
    </Syntax>

    <!--Test comment-->
    <Syntax Name="Return" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Break" Base="Statement" NS="Statements"/>
    <Syntax Name="Continue" Base="Statement" NS="Statements"/>

    <Syntax Name="VarDeclaration" Base="Statement">
        <Arguments>
            <Single Name="VariableType" Type="TypeRef"/>
            <List Name="Declarators" Type="DeclaratorList"/>
        </Arguments>
    </Syntax>

    <Syntax Name="VarDeclarator" Base="Statement">
        <Arguments>
            <Single Name="Initializer" Type="Expression"/>
            <Single Name="Identifier" Type="IdentifierToken"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ContextVariable" Base="Expression">
        <Arguments>
            <Single Name="Name" Type="String" DenyChildrenFill="true"/>
            <Single Name="Type" Type="TypeRef"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Literal" Base="Expression">
        <Arguments>
            <Single Name="Value" Type="String" DenyChildrenFill="true"/>
            <Single Name="IsSqlLiteral" Type="bool" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="GetFieldEx" Base="Expression">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="LookupEx" Base="Expression" IsAbstract="true">
        <Arguments>
            <Single Name="Lookup" Type="Expression"/>
            <Single Name="Current" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PropertyLookupEx" Base="LookupEx">
        <Arguments>
            <Single Name="Lookup" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="MethodLookupEx" Base="LookupEx">
        <Arguments>
            <Single Name="Lookup" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
            <Single Name="Current" Type="Expression" OnlyArgument="true" PassBase="true" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>


    <Syntax Name="AssignFieldEx" Base="Expression">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
            <Single Name="FieldName" Type="String" DenyChildrenFill="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="DoWhileStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Block" Type="BlockStmt"/>
        </Arguments>
    </Syntax>

    <Syntax Name="TryStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="TryBlock" Type="BlockStmt"/>
            <Single Name="CatchBlock" Type="BlockStmt"/>
            <Single Name="FinallyBlock" Type="BlockStmt"/>
        </Arguments>
    </Syntax>

    <Syntax Name="ExpressionStmt" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="For" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <Single Name="Counter" Type="Expression"/>
            <Single Name="Condition" Type="Expression"/>
            <Single Name="Initializer" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="While" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="Block" Type="BlockStmt"/>
            <Single Name="Condition" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="If" Base="Statement" NS="Statements">
        <Arguments>
            <Single Name="ElseBlock" Type="Statement"/>
            <Single Name="ThenBlock" Type="Statement"/>
            <Single Name="Condition" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostOperationEx" Base="Expression" NS="Expressions" IsAbstract="true">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostIncrementEx" Base="PostOperationEx" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" DenyChildrenFill="true" OnlyArgument="true"
                    PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="PostDecrementEx" Base="PostOperationEx" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression" DenyChildrenFill="true" OnlyArgument="true"
                    PassBase="true"/>
        </Arguments>
    </Syntax>

    <Syntax Name="Throw" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Exception" Type="Expression"/>
        </Arguments>
    </Syntax>

<!--    <Syntax Name="MatchAtom" NS="Statements">-->
<!--        <Arguments>-->
<!--            <Single Name="Block" Type="BlockStmt"/>-->
<!--            <Single Name="Expression" Type="Expression"/>-->
<!--            <Single Name="Type" Type="Type"/>-->
<!--        </Arguments>-->
<!--    </Syntax>-->

<!--    <Syntax Name="Match" Base="Statement" NS="Statements">-->
<!--        <Arguments>-->
<!--            <List Name="Matches" Type="MatchAtomList"/>-->
<!--            <Single Name="Expression" Type="Expression"/>-->
<!--        </Arguments>-->
<!--    </Syntax>-->


    <Syntax Name="GlobalVar" Base="Expression" NS="Expressions">
        <Arguments>
            <Single Name="Expression" Type="Expression"/>
        </Arguments>
    </Syntax>

</Config>